#include <bits/stdc++.h>
#include <assert.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define PB push_back
#define MP make_pair
#define MOD 1000000007LL

const ll MAXG = 4008;
#define NOPATH -1
#define UNDEF -1
ll path[MAXG];
bool seen[MAXG];
ll c[MAXG][MAXG];
vector<pair<ll,ll> > g[MAXG];
ll fstbit[MAXG];
ll dbge[MAXG];
bool gt(ll z, ll p) {
	return fstbit[z] >= p;
}

void add(ll z, ll p) {
	ll fst=p;
	c[z][p]++;
	while(c[z][p]>=3) {
		c[z][p] %= 3;
		p++;
		assert(p<MAXG);
		c[z][p]++;
		fst=p;
	}
	fstbit[z]=p;
}
void sub(ll z, ll p) {
	c[z][p]--;
	while(c[z][p]<0) {
		c[z][p] += 3;
		p++;
		assert(p<MAXG);
		c[z][p]--;
	}
	for (ll i=MAXG-1;i>=0;i--) {
		if (c[z][i]!=0) {
			fstbit[z] = i;
			return;
		}
	}
	fstbit[z]=-1;
}
ll getll(ll z) {
	ll ans=0;
	for (ll i=MAXG-1;i>=0;i--) {
		ans = (ans*3)%MOD;
		ans += c[z][i];
	}
	return ans%MOD;
}

pair<ll,ll> dfs(ll x, ll k, ll nv, ll p) {
	ll t = nv-1;
	seen[x] = true;
	if (x == t) {
		return MP(p,k);
	}
	for(auto &e: g[x]) {
		ll y = e.first;
		ll z = e.second;
		if (!seen[y] && gt(z,p)) {
			pair<ll,ll> cand = dfs(y, k+1, nv, p);
			if (cand.first != NOPATH) {
				path[k] = z;
				return MP(p, cand.second);
			}
		}
	}
	return MP(NOPATH,UNDEF);
}

ll maxflow(ll src, ll target, ll nv, ll M) {
	ll ans = 0;
	////printf("n:%lld\n",n);
	for (ll p=M;p>=0;p--) {
		ans = (ans * 3)%MOD;
		for (ll i = 0; i < nv; i++) {
			seen[i] = false;
		}
		pair<ll,ll> cap_len = dfs(src,0, nv, p);
		ll cap = cap_len.first;
		if (cap != NOPATH) {
			ll len = cap_len.second;
			ans=(ans+1)%MOD;
			for (ll i = 0; i < len; i++) {
				ll z = path[i];
				sub(z,p);
				add(z^1,p);
			}
		}
	}
	return ans;
}

class CandyCupRunningCompetition {
	public:
	int findMaximum(int N, vector <int> A, vector <int> B) {

		for (ll i=0;i<MAXG;i++) {
			for (ll j=0;j<MAXG;j++) {
				c[i][j]=0;
			}
		}
		ll z=0;
		for (ll i=0;i<A.size();i++) {
			ll x=A[i];
			ll y=B[i];
			c[z][i] = 1;
			c[z+1][i] = 1;
			fstbit[z]=i;
			fstbit[z+1]=i;
			g[x].PB(MP(y,z));
			g[y].PB(MP(x,z+1));
			dbge[z]=y;
			dbge[z+1]=x;
			z += 2;
		}
		assert(z<MAXG);
		ll ans = maxflow(0, N-1, N, A.size());
		return ans;
	}
};
// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	if (argc == 1) 
	{
		cout << "Testing CandyCupRunningCompetition (500.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1455344051;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 500.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		CandyCupRunningCompetition _obj;
		int _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				int N = 3;
				int A[] = {0,1};
				int B[] = {1,2};
				_expected = 1;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}
			case 1:
			{
				int N = 4;
				int A[] = {0,1,0,2};
				int B[] = {1,3,2,3};
				_expected = 10;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}
			case 2:
			{
				int N = 3;
				int A[] = {0};
				int B[] = {1};
				_expected = 0;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}
			case 3:
			{
				int N = 5;
				int A[] = {};
				int B[] = {};
				_expected = 0;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}
			case 4:
			{
				int N = 6;
				int A[] = {1,1,2,0,4,3,0,1,4};
				int B[] = {3,2,3,1,5,5,2,4,3};
				_expected = 39;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}
			case 5:
			{
				int N = 40;
				int A[] = {38, 37, 37, 36, 36, 36, 35, 35, 35, 35, 34, 34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
				int B[] = {39, 39, 38, 39, 38, 37, 39, 38, 37, 36, 39, 38, 37, 36, 35, 39, 38, 37, 36, 35, 34, 39, 38, 37, 36, 35, 34, 33, 39, 38, 37, 36, 35, 34, 33, 32, 39, 38, 37, 36, 35, 34, 33, 32, 31, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
				_expected = 266630453;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}
			case 6:
			{
				int N = 61;
				int A[] = {36, 56, 1, 32, 39, 10, 54, 46, 32, 35, 19, 3, 60, 13, 12, 53, 23, 27, 26, 53, 9, 12, 59, 60, 37, 39, 8, 42, 54, 50, 44, 33, 17, 49, 3, 54, 34, 45, 47, 59, 35, 55, 26, 34, 10, 5, 47, 23, 53, 1, 14, 54, 34, 46, 31, 51, 9, 42, 31, 36, 2, 23, 33, 45, 17, 56, 53, 58, 6, 6, 44, 19, 39, 52, 15, 40, 8, 0, 40, 28, 36, 2, 47, 33, 48, 58, 8, 21, 21, 31, 47, 46, 34, 22, 47, 43, 24, 34, 44, 10, 24, 16, 55, 29, 27, 48, 42, 51, 10, 8, 31, 2, 31, 45, 55, 49, 10, 56, 60, 4, 33, 13, 7, 8, 28, 11, 13, 38, 24, 20, 55, 4, 40, 1, 47, 26, 32, 60, 60, 13, 8, 54, 1, 2, 34, 39, 4, 34, 53, 51, 47, 9, 25, 2, 57, 5, 3, 47, 20, 55, 6, 34, 27, 60, 32, 14, 46, 39, 9, 57, 11, 39, 42, 44, 43, 58, 12, 59, 47, 15, 56, 38, 47, 60, 5, 35, 21, 45, 2, 36, 23, 28, 52, 39, 37, 20, 33, 56, 16, 44, 41, 12, 9, 48, 20, 27, 24, 10, 23, 15, 48, 35, 3, 27, 49, 22, 18, 28, 5, 43, 46, 20, 7, 24, 27, 25, 38, 24, 30, 57, 13, 26, 14, 20, 45, 32, 56, 6, 40, 57, 51, 22, 25, 55, 16, 44, 32, 49, 21, 30, 52, 59, 6, 26, 10, 48, 48, 37, 24, 36, 6, 54, 6, 9, 37, 38, 3, 40, 29, 29, 9, 5, 2, 26, 26, 36, 36, 26, 48, 36, 54, 24, 14, 46, 5, 31, 9, 37, 31, 46, 27, 22, 58, 16, 51, 35, 0, 37, 53, 20, 17, 0, 35, 32, 38, 28, 0, 13, 11, 18, 47, 5, 27, 12, 51, 31, 7, 35, 57, 53, 9, 22, 55, 33, 30, 3, 12, 28, 21, 4, 2, 29, 41, 12, 24, 25, 42, 41, 8, 14, 38, 7, 38, 25, 18, 60, 17, 50, 10, 35, 13, 1, 37, 40, 1, 45, 53, 16, 16, 50, 35, 1, 38, 19, 14, 56, 8, 53, 11, 53, 46, 24, 60, 25, 43, 48, 35, 29, 19, 59, 43, 21, 60, 8, 6, 3, 6, 34, 21, 29, 17, 52, 17, 0, 0, 43, 23, 57, 12, 26, 37, 21, 44, 7, 57, 45, 17, 40, 55, 26, 11, 19, 12, 37, 25, 25, 14, 46, 16, 31, 48, 53, 56, 30, 2, 49, 15, 48, 41, 39, 7, 0, 19, 9, 54, 52, 28, 55, 54, 54, 40, 26, 52, 57, 6, 1, 5, 41, 40, 42, 34, 30, 20, 27, 45, 46, 9, 38, 34, 8, 49, 15, 47, 16, 53, 47, 56, 2, 46, 59, 12, 42, 4, 47, 33, 39, 3, 48, 42, 58, 14, 56, 40, 31, 14, 47, 27, 39, 18, 5, 34, 52, 12, 12, 48, 24, 46, 1, 27, 44, 17, 6, 29, 24, 20, 13, 25, 21, 1, 45, 52, 41, 56, 10, 3, 48, 26, 36, 52, 57, 16, 31, 60, 16, 44, 52, 26, 22, 6, 20, 27, 38, 0, 19, 56, 3, 22, 47, 36, 9, 49, 0, 23, 34, 43, 29, 11, 39, 21, 14, 37, 21, 37, 31, 35, 56, 27, 43, 6, 46, 39, 30, 28, 31, 39, 11, 33, 3, 54, 35, 59, 20, 45, 11, 46, 0, 47, 40, 50, 5, 10, 10, 43, 18, 38, 40, 28, 49, 42, 18, 20, 8, 4, 28, 6, 0, 9, 11, 51, 26, 2, 53, 35, 32, 9, 11, 32, 12, 53, 15, 21, 55, 0, 10, 30, 40, 57, 58, 28, 24, 3, 23, 34, 10, 39, 14, 49, 11, 21, 25, 7, 8, 36, 18, 46, 16, 42, 57, 15, 22, 44, 37, 30, 40, 58, 32, 32, 9, 41, 21, 55, 23, 37, 29, 20, 45, 16, 39, 54, 42, 56, 31, 49, 53, 10, 23, 32, 14, 23, 58, 2, 56, 20, 23, 52, 11, 34, 60, 17, 22, 55, 1, 17, 19, 1, 6, 31, 22, 43, 26, 57, 36, 6, 20, 19, 24, 58, 1, 50, 20, 15, 32, 53, 38, 51, 54, 59, 18, 4, 18, 17, 14, 42, 3, 40, 56, 38, 22, 11, 16, 32, 14, 33, 20, 7, 14, 54, 43, 18, 56, 51, 34, 46, 53, 14, 16, 34, 1, 40, 13, 37, 20, 36, 41, 56, 51, 15, 21, 9, 47, 15, 11, 23, 3, 25, 41, 11, 13, 58, 37, 56, 8, 32, 22, 6, 19, 60, 30, 60, 51, 26, 47, 5, 26, 19, 39, 37, 22, 10, 28, 10, 6, 60, 28, 1, 49, 19, 59, 11, 10, 20, 22, 28, 48, 28, 16, 6, 22, 36, 40, 42, 13, 55, 26, 0, 15, 47, 23, 40, 55, 34, 0, 16, 21, 8, 35, 3, 22, 34, 49, 43, 29, 42, 59, 9, 13, 34, 49, 37, 34, 5, 11, 23, 30, 56, 41, 47, 0, 50, 12, 22, 43, 20, 50, 42, 36, 37, 11, 41, 0, 6, 43, 25, 1, 37, 15, 33, 49, 56, 41, 31, 36, 42, 32, 18, 16, 57, 58, 12, 28, 52, 2, 36, 38, 39, 10, 53, 37, 9, 2, 58, 23, 25, 51, 8, 49, 33, 23, 54, 41, 28, 45, 51, 48, 33, 54, 42, 6, 45, 23, 46, 28, 45, 53, 7, 18, 27, 46, 41, 54, 25, 25, 0, 19, 0, 49, 14, 50, 43, 30, 42, 27, 55, 20, 2, 11, 25, 60, 2, 3, 1, 36, 39, 24, 15, 25, 45, 32, 52, 20, 58, 16, 43, 35, 53, 40, 56, 17, 22, 23, 2, 42, 42, 13, 41, 37, 55, 6, 7, 19, 58, 42, 9, 54, 10, 13, 8, 60, 9, 55, 55, 39, 40, 52, 10, 16, 22, 0, 29, 20, 33, 24, 36, 21, 8, 30, 39, 60, 41, 16, 17, 56, 40, 57, 57, 46, 37, 9, 43, 0, 51, 1, 49, 14, 12, 47, 44, 42, 22, 55, 59, 36, 13, 51, 28, 9, 8, 28, 20, 40, 29, 32, 46, 30, 21, 2, 37, 26, 9, 43, 1, 36, 2, 4, 14, 8, 48, 18, 35, 2, 24, 59, 23, 58, 39, 27, 7, 50, 19, 48, 5, 14, 13, 40, 30, 43, 25, 56, 51, 15, 9, 40, 25, 50, 12, 60, 14, 59, 18, 52, 11, 58, 7, 48, 49, 50, 14, 55, 23, 10, 28, 30, 57, 47, 46, 4, 40, 56, 42, 57, 10, 35, 30, 41, 41, 37, 17, 45, 11, 18, 55, 9, 13, 12, 8, 59, 59, 23, 27, 57, 37, 18, 41, 55, 45, 17, 16, 41, 8, 22, 60, 40, 59, 38, 48, 54, 48, 37, 14, 0, 21, 38, 49, 50, 41, 41, 30, 4, 20, 52, 44, 56, 43, 58, 33, 19, 7, 4, 40, 34, 45, 27, 42, 51, 51, 39, 45, 41, 5, 2, 44, 35, 1, 36, 3, 29, 4, 51, 10, 17, 60, 34, 57, 40, 47, 49, 4, 48, 6, 60, 28, 58, 3, 18, 15, 59, 12, 11, 19, 59, 49, 33, 60, 14, 1, 4, 40, 16, 55, 57, 46, 43, 49, 43, 38, 8, 18, 41, 2, 33, 52, 52, 38, 31, 18, 40, 53, 58, 36, 36, 52, 8, 53, 21, 44, 1, 57, 13, 27, 53, 35, 51, 42, 50, 0, 34, 23, 23, 29, 48, 4, 41, 19, 58, 26, 2, 16, 11, 7, 59, 11, 9, 25, 49, 39, 9, 12, 49, 3, 9, 48, 31, 40, 41, 47, 45, 34, 48, 54, 52, 39, 0, 17, 44, 53, 50, 46, 29, 20, 12, 44, 48, 5, 54, 32, 39, 39, 5, 37, 27, 39, 22, 3, 37, 14, 15, 11, 46, 31, 41, 38, 26, 32, 53, 54, 10, 38, 46, 5, 5, 55, 23, 8, 40, 9, 59, 32, 47, 42, 50, 13, 54, 10, 0, 59, 47, 15, 13, 34, 31, 13, 38, 26, 14, 9, 4, 14, 25, 15, 37, 10, 50, 48, 40, 19, 39, 34, 36, 20, 38, 39, 4, 11, 12, 15, 20, 57, 36, 24, 5, 13, 9, 45, 26, 57, 28, 32, 11, 12, 2, 54, 14, 6, 55, 43, 24, 20, 44, 4, 44, 27, 40, 43, 8, 23, 32, 11, 38, 44, 20, 19, 50, 14, 17, 35, 39, 19, 35, 34, 28, 49, 50, 49, 60, 39, 38, 46, 8, 28, 13, 52, 24, 41, 6, 27, 29, 16, 20, 21, 34, 51, 14, 52, 47, 27, 11, 42, 15, 47, 29, 28, 20, 43, 50, 7, 49, 21, 32, 26, 59, 44, 30, 28, 40, 4, 28, 1, 57, 60, 3, 27, 42, 6, 13, 44, 24, 38, 29, 58, 13, 43, 43, 44, 44, 5, 36, 52, 43, 30, 9, 26, 31, 51, 51, 30, 54, 11, 19, 60, 27, 40, 18, 35, 58, 17, 19, 48, 59, 52, 7, 28, 0, 22, 44, 40, 48, 0, 46, 11, 4, 22, 33, 31, 52, 57, 5, 49, 24, 11, 17, 18, 41, 23, 38, 44, 13, 42, 16, 32, 55, 48, 34, 31, 2, 33, 12, 45, 12, 12, 50, 6, 58, 47, 47, 12, 17, 30, 34, 57, 16, 58, 35, 22, 40, 47, 35, 54, 3, 35, 14, 45, 47, 34, 54, 57, 58, 29, 21, 51, 52, 5, 55, 6, 55, 20, 14, 58, 36, 53, 42, 0, 51, 40, 57, 15, 24, 41, 21, 46, 50, 2, 59, 43, 13, 25, 38, 24, 7, 59, 50, 30, 8, 19, 2, 2, 48, 10, 39, 20, 45, 42, 50, 57, 51, 35, 2, 25, 6, 6, 28, 46, 60, 35, 53, 27, 44, 42, 49, 59, 7, 10, 8, 55, 38, 21, 19, 35, 39, 14, 30, 9, 59, 44, 7, 9, 44, 56, 40, 43, 26, 27, 12, 13, 46, 5, 37, 19, 49, 17, 41, 1, 49, 22, 24, 51, 25, 42, 6, 23, 46, 42, 31, 17, 10, 34, 6, 20, 47, 11, 11, 15, 28, 33, 30, 14, 43, 53, 7, 57, 10, 47, 44, 12, 4, 31, 10, 55, 2, 14, 46, 36, 12, 4, 38, 5, 25, 16, 52, 49, 10, 17, 10, 33, 36, 5, 14, 19, 29, 41, 40, 34, 31, 46, 52, 42, 17, 24, 35, 15, 51, 34, 50, 53, 30, 33, 44, 48, 60, 57, 58, 53, 48, 42, 58, 8, 13, 41, 11, 32, 15, 31, 19, 10, 16, 11, 39, 18, 21, 49, 30, 21, 10, 13, 48, 47, 57, 31, 45, 45, 5, 27, 29, 2, 40, 60, 54, 55, 29, 16, 34, 42, 17, 56, 34, 53, 17, 3, 36, 7, 40, 10, 20, 29, 18, 36, 20, 57, 43, 16, 44, 8, 12, 2, 52, 2, 19, 58, 53, 44, 41, 4, 46, 24, 39, 59, 1, 3, 12, 15, 59, 6, 31, 1, 12, 13, 53, 39, 6, 22, 12, 32, 49, 10, 25, 29, 10, 32, 4, 45, 5};
				int B[] = {46, 19, 58, 31, 11, 58, 7, 33, 11, 1, 18, 12, 29, 56, 23, 48, 30, 58, 15, 1, 24, 28, 55, 31, 50, 43, 13, 17, 3, 59, 20, 0, 1, 39, 41, 14, 18, 17, 30, 8, 21, 20, 4, 31, 24, 14, 29, 55, 56, 33, 20, 5, 48, 30, 38, 7, 33, 51, 5, 59, 37, 20, 14, 21, 58, 48, 25, 7, 8, 33, 30, 35, 21, 0, 48, 60, 37, 53, 32, 8, 45, 51, 23, 47, 39, 38, 19, 7, 22, 21, 41, 41, 54, 19, 8, 34, 49, 32, 22, 41, 37, 31, 51, 11, 7, 40, 45, 31, 60, 50, 50, 22, 25, 44, 48, 15, 7, 26, 17, 41, 16, 16, 18, 36, 50, 14, 9, 37, 26, 7, 27, 49, 53, 51, 57, 54, 50, 55, 33, 29, 52, 43, 43, 30, 52, 3, 16, 12, 6, 33, 24, 12, 37, 52, 58, 57, 0, 53, 29, 13, 45, 56, 38, 48, 2, 32, 8, 1, 32, 13, 46, 54, 6, 58, 45, 41, 18, 56, 37, 10, 21, 3, 17, 15, 27, 9, 0, 30, 39, 54, 32, 48, 32, 23, 56, 27, 36, 54, 43, 9, 45, 5, 17, 44, 19, 29, 29, 55, 59, 17, 12, 15, 26, 34, 35, 26, 39, 26, 22, 41, 56, 13, 47, 50, 2, 33, 8, 14, 55, 48, 34, 29, 35, 24, 39, 3, 30, 1, 14, 60, 18, 33, 11, 38, 6, 7, 56, 57, 54, 5, 30, 0, 3, 44, 26, 16, 8, 6, 4, 39, 26, 50, 0, 38, 26, 4, 25, 26, 51, 25, 47, 9, 45, 43, 34, 4, 58, 48, 27, 55, 20, 3, 17, 39, 59, 15, 6, 33, 0, 5, 59, 32, 4, 32, 36, 37, 13, 3, 38, 58, 18, 29, 23, 49, 17, 13, 45, 46, 1, 24, 50, 21, 9, 0, 6, 56, 49, 48, 53, 27, 29, 1, 19, 21, 15, 21, 42, 46, 15, 14, 13, 45, 19, 13, 35, 49, 27, 35, 27, 13, 46, 37, 24, 50, 27, 6, 27, 52, 27, 59, 54, 18, 31, 19, 30, 12, 31, 51, 60, 56, 18, 34, 35, 0, 27, 35, 25, 55, 4, 42, 32, 58, 34, 51, 8, 59, 4, 42, 5, 44, 2, 32, 43, 26, 58, 17, 27, 17, 26, 2, 16, 28, 29, 58, 25, 50, 13, 56, 17, 12, 58, 37, 6, 1, 50, 26, 7, 59, 25, 31, 50, 48, 36, 20, 54, 21, 26, 9, 1, 39, 37, 20, 15, 4, 14, 33, 9, 25, 21, 47, 15, 9, 7, 11, 24, 54, 10, 56, 2, 37, 54, 27, 10, 41, 50, 21, 52, 0, 5, 4, 44, 41, 15, 37, 40, 34, 48, 54, 22, 55, 22, 38, 12, 29, 41, 14, 3, 3, 25, 19, 32, 28, 34, 4, 40, 59, 16, 47, 3, 15, 44, 58, 17, 10, 9, 54, 21, 9, 58, 28, 49, 3, 58, 51, 2, 21, 15, 26, 0, 54, 57, 17, 48, 33, 25, 35, 60, 42, 46, 59, 55, 17, 20, 57, 44, 50, 59, 25, 31, 34, 53, 19, 28, 15, 2, 36, 46, 50, 36, 32, 60, 16, 11, 30, 5, 49, 30, 42, 21, 36, 27, 36, 0, 15, 40, 46, 34, 26, 30, 10, 22, 34, 46, 29, 29, 9, 1, 48, 24, 23, 12, 38, 49, 33, 7, 19, 3, 59, 9, 60, 29, 43, 32, 56, 52, 44, 43, 8, 40, 25, 22, 33, 35, 54, 0, 38, 54, 30, 38, 0, 16, 57, 23, 36, 55, 37, 7, 3, 58, 47, 28, 4, 40, 44, 41, 53, 5, 7, 29, 18, 46, 33, 39, 45, 7, 3, 7, 60, 32, 0, 47, 41, 29, 51, 52, 49, 51, 16, 60, 27, 38, 32, 44, 50, 54, 36, 16, 33, 50, 46, 33, 15, 10, 0, 59, 30, 24, 42, 5, 59, 5, 11, 52, 44, 50, 18, 37, 58, 32, 8, 29, 9, 8, 44, 36, 7, 27, 42, 3, 29, 36, 41, 48, 50, 23, 20, 19, 56, 35, 27, 21, 0, 10, 24, 9, 20, 58, 6, 38, 35, 2, 53, 28, 60, 2, 53, 3, 8, 1, 9, 29, 17, 5, 33, 52, 10, 60, 25, 12, 49, 4, 8, 59, 27, 24, 45, 23, 54, 49, 59, 37, 59, 54, 2, 36, 48, 6, 31, 59, 28, 19, 35, 24, 60, 39, 54, 47, 14, 58, 51, 30, 59, 38, 14, 17, 47, 2, 23, 43, 2, 23, 10, 26, 5, 26, 42, 48, 53, 35, 53, 18, 18, 25, 7, 34, 33, 18, 33, 4, 14, 38, 16, 15, 52, 32, 56, 1, 56, 13, 25, 32, 12, 37, 19, 13, 60, 13, 9, 28, 29, 18, 28, 9, 51, 0, 52, 43, 29, 35, 7, 56, 25, 16, 19, 7, 8, 1, 27, 10, 41, 42, 16, 21, 28, 22, 46, 51, 36, 51, 2, 52, 1, 13, 15, 34, 43, 5, 20, 18, 24, 37, 41, 25, 17, 52, 49, 0, 15, 49, 38, 45, 14, 21, 0, 11, 31, 36, 31, 34, 57, 19, 29, 59, 60, 11, 14, 56, 36, 12, 12, 57, 47, 57, 57, 22, 56, 14, 33, 33, 18, 59, 1, 1, 21, 51, 8, 18, 17, 26, 25, 23, 51, 24, 26, 23, 1, 15, 60, 30, 38, 16, 23, 57, 18, 35, 12, 20, 56, 1, 53, 20, 30, 15, 49, 42, 4, 43, 16, 26, 23, 45, 39, 42, 47, 60, 21, 6, 4, 23, 16, 10, 52, 40, 17, 9, 52, 47, 7, 12, 60, 25, 5, 41, 43, 39, 30, 49, 36, 15, 5, 5, 18, 32, 54, 43, 18, 40, 2, 24, 6, 16, 23, 5, 5, 37, 28, 0, 7, 4, 38, 49, 15, 16, 19, 56, 40, 54, 41, 19, 24, 1, 17, 23, 24, 34, 10, 16, 5, 57, 41, 26, 7, 57, 52, 20, 14, 8, 44, 29, 58, 11, 44, 30, 4, 55, 60, 45, 23, 33, 32, 45, 24, 29, 21, 14, 49, 4, 19, 35, 45, 57, 23, 7, 21, 3, 25, 4, 29, 47, 57, 4, 35, 0, 53, 57, 10, 13, 55, 18, 5, 56, 18, 41, 56, 46, 11, 24, 55, 30, 23, 31, 28, 34, 48, 57, 57, 56, 33, 50, 7, 38, 22, 11, 37, 0, 18, 56, 0, 5, 22, 21, 41, 22, 26, 55, 11, 31, 13, 33, 22, 27, 46, 55, 3, 13, 21, 18, 54, 22, 37, 35, 6, 3, 5, 27, 40, 12, 51, 31, 18, 1, 55, 26, 8, 50, 44, 44, 47, 5, 52, 22, 49, 48, 53, 9, 22, 54, 49, 19, 20, 39, 47, 54, 58, 38, 28, 27, 1, 5, 3, 54, 9, 37, 29, 41, 29, 45, 51, 19, 43, 17, 10, 5, 51, 24, 16, 29, 33, 22, 12, 8, 14, 19, 47, 27, 17, 31, 59, 20, 7, 4, 4, 37, 9, 60, 24, 9, 15, 7, 50, 39, 7, 48, 15, 18, 7, 37, 40, 43, 33, 45, 20, 26, 15, 46, 31, 43, 30, 10, 36, 14, 26, 4, 11, 51, 32, 16, 24, 23, 2, 55, 23, 39, 16, 3, 32, 25, 45, 3, 23, 48, 51, 12, 36, 25, 2, 38, 59, 7, 52, 20, 4, 28, 3, 30, 42, 14, 43, 11, 30, 38, 21, 8, 43, 55, 23, 6, 22, 36, 22, 11, 46, 55, 46, 26, 14, 31, 24, 18, 32, 21, 18, 53, 22, 20, 42, 23, 40, 28, 47, 6, 53, 12, 19, 10, 52, 8, 37, 36, 60, 0, 18, 36, 36, 35, 20, 50, 31, 48, 17, 50, 14, 59, 1, 32, 3, 6, 50, 28, 1, 50, 38, 39, 4, 6, 42, 4, 29, 9, 15, 28, 39, 7, 29, 7, 32, 21, 12, 54, 31, 47, 42, 60, 3, 11, 46, 51, 7, 6, 23, 28, 18, 17, 16, 55, 12, 58, 11, 22, 10, 32, 27, 44, 20, 46, 44, 44, 52, 3, 59, 3, 44, 18, 45, 57, 2, 36, 34, 43, 34, 25, 7, 33, 39, 15, 32, 0, 56, 35, 6, 16, 15, 55, 30, 3, 3, 37, 50, 13, 1, 4, 10, 11, 5, 24, 51, 38, 44, 31, 24, 17, 23, 31, 43, 49, 56, 51, 23, 25, 49, 51, 31, 25, 31, 48, 26, 57, 22, 42, 10, 4, 38, 55, 24, 3, 55, 3, 45, 53, 15, 54, 16, 26, 5, 35, 13, 4, 45, 31, 45, 6, 45, 25, 13, 56, 21, 24, 1, 18, 38, 8, 58, 35, 28, 28, 59, 36, 6, 31, 6, 24, 39, 28, 53, 25, 10, 13, 7, 53, 33, 57, 11, 34, 1, 55, 33, 57, 28, 50, 43, 47, 1, 47, 33, 21, 15, 57, 8, 53, 26, 11, 56, 19, 24, 48, 48, 7, 37, 42, 22, 60, 13, 53, 0, 24, 42, 33, 52, 47, 35, 22, 46, 0, 2, 22, 37, 52, 49, 25, 33, 1, 4, 41, 13, 34, 4, 8, 40, 22, 20, 0, 2, 1, 29, 35, 45, 56, 60, 12, 13, 44, 7, 37, 60, 5, 41, 24, 44, 42, 32, 42, 30, 22, 26, 39, 15, 19, 43, 24, 30, 40, 11, 56, 40, 27, 31, 39, 59, 22, 57, 28, 2, 4, 28, 10, 25, 58, 30, 53, 60, 31, 13, 36, 45, 25, 45, 33, 47, 59, 14, 35, 50, 4, 46, 38, 29, 9, 13, 54, 60, 17, 32, 2, 52, 47, 36, 33, 12, 3, 9, 5, 6, 22, 39, 15, 1, 8, 59, 43, 58, 58, 30, 16, 18, 21, 6, 35, 53, 33, 3, 43, 12, 46, 35, 8, 0, 16, 21, 41, 23, 31, 12, 16, 59, 50, 35, 49, 38, 1, 43, 12, 7, 47, 11, 40, 58, 50, 19, 25, 27, 3, 30, 41, 45, 30, 51, 2, 52, 46, 17, 40, 37, 27, 19, 16, 55, 25, 0, 51, 28, 54, 52, 51, 51, 4, 17, 50, 49, 56, 45, 52, 30, 55, 18, 58, 2, 31, 52, 7, 26, 11, 53, 42, 43, 50, 57, 46, 53, 30, 59, 22, 28, 57, 1, 27, 0, 34, 60, 38, 42, 20, 22, 5, 56, 50, 6, 7, 60, 17, 3, 50, 19, 45, 26, 17, 37, 60, 55, 52, 49, 33, 55, 17, 44, 58, 48, 27, 42, 13, 54, 16, 45, 17, 60, 53, 27, 21, 8, 45, 52, 2, 10, 18, 8, 33, 30, 27, 2, 41, 1, 35, 57, 5, 49, 51, 27, 6, 19, 48, 51, 53, 21, 58, 22, 32, 15, 4, 28, 52, 33, 45, 36, 38, 29, 13, 0, 15, 32, 26, 8, 25, 43, 8, 2, 52, 23, 14, 17, 26, 44, 53, 30, 23, 13, 19, 12, 54, 44, 8, 31, 3, 29, 55, 1, 46, 29, 21, 15, 25, 51, 9, 44, 5, 34, 24, 32, 29, 44, 54, 38, 35, 2, 19, 19, 50, 45, 38, 39, 60, 35, 18, 46, 4, 58, 39, 23, 33, 28, 34, 18};
				_expected = 181319191;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}
			/*case 7:
			{
				int N = ;
				int A[] = ;
				int B[] = ;
				_expected = ;
				_received = _obj.findMaximum(N, vector <int>(A, A+sizeof(A)/sizeof(int)), vector <int>(B, B+sizeof(B)/sizeof(int))); break;
			}*/
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		double _elapsed = (double)(clock()-_start)/CLOCKS_PER_SEC;
		if (_received == _expected)
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout << "           Expected: " << _expected << endl;
			cout << "           Received: " << _received << endl;
		}
	}
}

// END CUT HERE
