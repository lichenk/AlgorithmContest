#include <bits/stdc++.h>
#include <assert.h>
using namespace std;
typedef int ll;
typedef long double ld;
typedef pair<ll,ll> pll;
#define PB push_back
#define MP make_pair
const ll INF = 1<<28;
template<typename T> inline bool chkmax(T &aa, T bb) { return aa < bb ? aa = bb, true : false; }
template<typename T> inline bool chkmin(T &aa, T bb) { return aa > bb ? aa = bb, true : false; } 

const ll MAXN=100*100;
vector<vector<int> > graph, rev_graph;
int used[2*MAXN], comp[2*MAXN], order[2*MAXN], res[2*MAXN], twosat_cnt = 0;

void dfs1(int u) { used[u] = true;
  for (auto i = 0u; i < graph[u].size(); i++) {
    int v = graph[u][i];
    if (!used[v]) dfs1(v); }
  order[twosat_cnt++] = u; }
void dfs2(int u, int color) { comp[u] = color;
  for (auto i = 0u; i < rev_graph[u].size(); i++) {
    int v = rev_graph[u][i];
    if (comp[v] == -1) dfs2(v, color); } }
bool twosat() { int n = graph.size();
  for (int i = 0; i < n; i++) if (!used[i]) dfs1(i);
  for (int i = 0; i < n; i++) for (auto j = 0u; j < graph[i].size(); j++)
    rev_graph[graph[i][j]].push_back(i);
  for (int i = 0, color = 0; i < n; i++) {
    int u = order[n-i-1];
    if (comp[u] == -1) dfs2(u, color++); }
  for (int i = 0; i < n; i++) if (comp[i] == comp[i^1]) return false;
  for (int i = 0; i < n; i+=2) res[i/2] = (comp[i] > comp[i^1]);
  return true; }
//if type = 0, we add the edge x -> y, if type = 1, we add the edge ~x -> y
//if type = 2, we add the edge x -> ~y, if type = 3, we add the edge ~x -> ~y
//NOTE: each implication and its dual implication is also added, so NO need to
//add twice for each implication.
void add(int x, int y) { graph[x].push_back(y); };
void add_edge(int x, int y, int type) {
	int a=2*x, na=2*x+1, b=2*y, nb=2*y+1;
  switch (type) {
    case 0: add(a,b); add(nb, na); break;
    case 1: add(na, b); add(nb, a); break;
    case 2: add(a, nb); add(b, na); break;
    case 3: add(na, nb); add(b,a); break; } }

void add_edge2(int x, bool tx, int y, bool ty) {
	// tx is True if x is True
	// ty is True if y is True
	//printf("x:%d tx:%d y:%d ty:%d\n",x,tx,y,ty);
	int a=2*x, na=2*x+1, b=2*y, nb=2*y+1;
	if (!tx) swap(a,na);
	if (!ty) swap(b,nb);
	add(a,b); add(nb, na);
}

void inittwosat(int n) {
    graph.clear(); rev_graph.clear();
    graph.resize(2*n);
    rev_graph.resize(2*n);
    twosat_cnt=0;
    memset(order, 0, sizeof order);
    memset(comp, -1, sizeof comp);
    memset(used, 0, sizeof used);
}

const ll klim=99;
//const ll klim=3;
const ll maxd=klim+1;

ll getnode(ll id, ll k) {
	return id*100+k;
	//return id*99+(k-1);
}
bool a[101][101];
inline ll binop(ll lhs, string op, ll rhs) {
	if (op=="+") return lhs+rhs;
	if (op=="-") return lhs-rhs;
	if (op=="*") return lhs*rhs;
}
inline bool dorl(ll lhs, string rl, ll rhs) {
	if (rl=="<=") return lhs<=rhs;
	if (rl==">=") return lhs>=rhs;
	if (rl=="<") return lhs<rhs;
	if (rl==">") return lhs>rhs;
}
void go(ll id1, ll id2, string op, string rl, ll val) {
	//printf("%d %s %d %s %f\n",id1,op.c_str(),id2,rl.c_str(),val/1000.0);
	if (op=="/") {
		for (ll x=1;x<=100;x++) {
			for (ll y=1;y<=100;y++) {
				a[x][y]=dorl(1000*x,rl,val*y);
			}
		}		
	}
	else {
		for (ll x=1;x<=100;x++) {
			for (ll y=1;y<=100;y++) {
				ll lhs=binop(x,op,y)*1000;
				ll rhs=val;
				a[x][y]=dorl(lhs,rl,rhs);
			}
		}
	}
	// How does x<=k affect y?
	for (ll k=1;k<=klim;k++) {
		ll ylo1=INF,yhi1=-INF;
		{
			ll x=1;
			for (ll y=1;y<=maxd;y++) {
				if (a[x][y]) {
					chkmin(ylo1,y);
					chkmax(yhi1,y);
				}
			}
		}
		ll ylo2=INF,yhi2=-INF;
		{
			ll x=k;
			for (ll y=1;y<=maxd;y++) {
				if (a[x][y]) {
					chkmin(ylo2,y);
					chkmax(yhi2,y);
				}
			}
		}
		ll ylo=min(ylo1,ylo2),yhi=max(yhi1,yhi2);
		//printf("x<=%d has ylo:%d yhi:%d\n",k,ylo,yhi);
		if (yhi==-INF||ylo==INF) {add_edge(getnode(id1,k),getnode(id1,k),2);} else {
		if (yhi!=100) add_edge(getnode(id1,k),getnode(id2,yhi),0);
		if (ylo!=1) add_edge(getnode(id1,k),getnode(id2,ylo-1),2);}
	}
	// How does x>k affect y?
	for (ll k=1;k<=klim;k++) {
		ll ylo1=INF,yhi1=-INF;
		{
			ll x=100;
			for (ll y=1;y<=maxd;y++) {
				if (a[x][y]) {
					chkmin(ylo1,y);
					chkmax(yhi1,y);
				}
			}
		}
		ll ylo2=INF,yhi2=-INF;
		{
			ll x=k+1;
			for (ll y=1;y<=maxd;y++) {
				if (a[x][y]) {
					chkmin(ylo2,y);
					chkmax(yhi2,y);
				}
			}
		}
		ll ylo=min(ylo1,ylo2),yhi=max(yhi1,yhi2);
		//printf("x>%d has ylo:%d yhi:%d\n",k,ylo,yhi);
		if (yhi==-INF||ylo==INF) {add_edge(getnode(id1,k),getnode(id1,k),1);} else {
		if (yhi!=100) add_edge(getnode(id1,k),getnode(id2,yhi),1);
		if (ylo!=1) add_edge(getnode(id1,k),getnode(id2,ylo-1),3);}
	}
	// How does y<=k affect x?
	for (ll k=1;k<=klim;k++) {
		ll ylo1=INF,yhi1=-INF;
		{
			ll x=1;
			for (ll y=1;y<=maxd;y++) {
				if (a[y][x]) {
					chkmin(ylo1,y);
					chkmax(yhi1,y);
				}
			}
		}
		ll ylo2=INF,yhi2=-INF;
		{
			ll x=k;
			for (ll y=1;y<=maxd;y++) {
				if (a[y][x]) {
					chkmin(ylo2,y);
					chkmax(yhi2,y);
				}
			}
		}
		ll ylo=min(ylo1,ylo2),yhi=max(yhi1,yhi2);
		//printf("y<=%d has xlo:%d xhi:%d\n",k,ylo,yhi);
		if (yhi==-INF||ylo==INF) {add_edge(getnode(id2,k),getnode(id2,k),2);} else {
		if (yhi!=100) add_edge(getnode(id2,k),getnode(id1,yhi),0);
		if (ylo!=1) add_edge(getnode(id2,k),getnode(id1,ylo-1),2);}
	}
	// How does x>k affect y?
	for (ll k=1;k<=klim;k++) {
		ll ylo1=INF,yhi1=-INF;
		{
			ll x=100;
			for (ll y=1;y<=maxd;y++) {
				if (a[y][x]) {
					chkmin(ylo1,y);
					chkmax(yhi1,y);
				}
			}
		}
		ll ylo2=INF,yhi2=-INF;
		{
			ll x=k+1;
			for (ll y=1;y<=maxd;y++) {
				if (a[y][x]) {
					chkmin(ylo2,y);
					chkmax(yhi2,y);
				}
			}
		}
		ll ylo=min(ylo1,ylo2),yhi=max(yhi1,yhi2);
		//printf("y>%d has xlo:%d xhi:%d\n",k,ylo,yhi);
		if (yhi==-INF||ylo==INF) {add_edge(getnode(id2,k),getnode(id2,k),1);} else {
		if (yhi!=100) add_edge(getnode(id2,k),getnode(id1,yhi),1);
		if (ylo!=1) add_edge(getnode(id2,k),getnode(id1,ylo-1),3);}
	}
}
class NeverAskHerAge {
	public:
	vector <int> possibleSolution(int n, vector <int> id1, vector <int> id2, vector <string> op, vector <string> rl, vector <int> val) {
		if (klim!=99) printf("CHANGE KLIM\n");
		inittwosat(n*100);
		for (ll i=0;i<n;i++) {
			for (ll k=1;k<=klim-1;k++) {
				add_edge(getnode(i,k),getnode(i,k+1),0);
				add_edge(getnode(i,k+1),getnode(i,k),3);
			}
		}
		ll q=id1.size();
		for (ll i=0;i<q;i++) {
			if (rl[i]=="=") {
				go(id1[i]-1, id2[i]-1, op[i], "<=", val[i]);
				go(id1[i]-1, id2[i]-1, op[i], ">=", val[i]);
			}
			else go(id1[i]-1, id2[i]-1, op[i], rl[i], val[i]);
		}
		bool possible=twosat();
		if (!possible) return {};
		vector<int> vans;
		for (ll i=0;i<n;i++) {
			ll ans=100;
			for (ll k=1;k<=klim;k++) {
				if (res[getnode(i,k)]) {
					ans=k; break;
				}
			}
			vans.PB(ans);
		}
		return vans;
	}
};
// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	if (argc == 1) 
	{
		cout << "Testing NeverAskHerAge (1000.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1486451101;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 1000.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		NeverAskHerAge _obj;
		vector <int> _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				int n = 2;
				int id1[] = {1,1};
				int id2[] = {2,2};
				string op[] = {"+","*"};
				string rl[] = {"=","="};
				int val[] = {10000,21000};
				int __expected[] = {3, 7 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 1:
			{
				int n = 7;
				int id1[] = {1,2,3,4,5,6};
				int id2[] = {2,3,4,5,6,7};
				string op[] = {"/","/","/","/","/","/"};
				string rl[] = {"=","=","=","=","=","="};
				int val[] = {2000,2000,2000,2000,2000,2000};
				int __expected[] = {64, 32, 16, 8, 4, 2, 1 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 2:
			{
				int n = 2;
				int id1[] = {1,1};
				int id2[] = {2,2};
				string op[] = {"/","/"};
				string rl[] = {">","<"};
				int val[] = {2621,2622};
				int __expected[] = {97, 37 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 3:
			{
				int n = 2;
				int id1[] = {1,1};
				int id2[] = {2,2};
				string op[] = {"*","+"};
				string rl[] = {">","<="};
				int val[] = {6000,5000};
				int __expected[] = { };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 4:
			{
				int n = 8;
				int id1[] = {1,3,5,7};
				int id2[] = {2,4,6,8};
				string op[] = {"+","-","*","/"};
				string rl[] = {">=","<=","=","<="};
				int val[] = {200000,-99000,3589000,10};
				int __expected[] = {100, 100, 1, 100, 97, 37, 1, 100 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 5:
			{
				int n = 8;
				int id1[] = {7,1,3,4,4,3,7,2,3,6,4,4,6,5,2,8,2,2,7,6,2,2,8,6,5,6,5,4,4,8,6,1,3,5,5,4,3,7,4,8};
				int id2[] = {2,7,6,6,1,2,4,7,4,4,8,3,8,2,4,1,7,7,6,2,5,7,6,5,8,2,8,1,8,1,3,2,7,1,2,2,1,8,3,3};
				string op[] = {"/","*","/","-","*","+","*","+","/","+","-","+","*","+","/","*","-","/","-","*","/","/","/","*","/","+","+","*","*","-","-","*","+","+","+","-","+","/","+","*"};
				string rl[] = {"<","<","<=",">","<","<=","<",">","<","<=","<=",">",">",">=","<",">","<","<",">",">=","<=","<","<=",">=","<=",">=",">=",">=","<=",">=","<=",">","<=","<",">","<=",">=","<","<=","<="};
				int val[] = {47636,5754558,3307,-41496,7043286,144246,5048203,72315,85384,182630,50604,9802,3843942,152392,60035,149684,94234,31209,-73898,195742,8383,71993,98477,4859384,74619,146266,60163,377564,5357728,-80040,72545,1088942,87517,192354,18629,45785,44151,95334,140360,1063484};
				int __expected[] = {56, 77, 19, 59, 77, 87, 43, 51 };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 6:
			{
				int n = 8;
				int id1[] = {7,1,3,4,4,3,7,2,3,6,4,4,6,5,2,8,2,2,7,6,2,2,8,6,5,6,5,4,4,8,6,1,3,5,5,4,3,7,4,8};
				int id2[] = {2,7,6,6,1,2,4,7,4,4,8,3,8,2,4,1,7,7,6,2,5,7,6,5,8,2,8,1,8,1,3,2,7,1,2,2,1,8,3,3};
				string op[] = {"/","*","/","-","*","+","*","+","/","+","-","+","*","+","/","*","-","/","-","*","/","/","/","*","/","+","+","*","*","-","-","*","+","+","+","-","+","/","+","*"};
				string rl[] = {"=","<","<=",">","<","<=","<",">","<","<=","<=",">",">",">=","<",">","<","<",">",">=","<=","<","<=",">=","<=",">=",">=",">=","<=",">=","<=",">","<=","<",">","<=",">=","<","<=","<="};
				int val[] = {2000,5754558,3307,-41496,7043286,144246,5048203,72315,85384,182630,50604,9802,3843942,152392,60035,149684,94234,31209,-73898,195742,8383,71993,98477,4859384,74619,146266,60163,377564,5357728,-80040,72545,1088942,87517,192354,18629,45785,44151,95334,140360,1063484};
				int __expected[] = { };
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 7:
			{
				int n = 2;
				int id1[] = {1};
				int id2[] = {2};
				string op[] = {"*"};
				string rl[] = {"="};
				int val[] = {2000};
				int __expected[] = {1, 2};
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 8:
			{
				int n = 2;
				int id1[] = {1,1};
				int id2[] = {2,2};
				string op[] = {"/","/"};
				string rl[] = {">","<"};
				int val[] = {666,667};
				int __expected[] = {2, 3};
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			case 9:
			{
				int n = 100;
				int id1[] = {25, 30, 72, 2, 26, 57, 89, 92, 3, 40, 67, 83, 64, 26, 24, 52, 86, 15, 43, 73, 75, 5, 68, 16, 48, 32, 50, 72, 91, 78, 25, 23, 68, 97, 35, 86, 18, 4, 27, 79, 50, 74, 26, 14, 76, 22, 67, 15, 88, 29, 21, 70, 42, 81, 11, 39, 81, 23, 22, 47, 63, 37, 79, 100, 21, 39, 72, 77, 46, 26, 1, 64, 84, 2, 28, 19, 85, 28, 74, 2, 23, 88, 4, 94, 95, 43, 15, 44, 91, 30, 88, 25, 9, 47, 45, 97, 15, 32, 86, 52, 53, 48, 94, 35, 36, 64, 28, 99, 92, 61, 51, 79, 3, 19, 75, 65, 4, 42, 3, 100, 76, 20, 99, 21, 48, 93, 97, 16, 17, 25, 89, 78, 46, 44, 94, 70, 28, 97, 46, 29, 59, 27, 92, 97, 72, 81, 52, 90, 46, 41, 83, 3, 96, 18, 60, 53, 46, 27, 19, 73, 31, 9, 67, 56, 91, 82, 25, 59, 79, 31, 12, 20, 60, 29, 80, 78, 93, 12, 72, 86, 45, 28, 11, 23, 83, 64, 41, 13, 47, 94, 74, 1, 2, 64, 32, 72, 98, 7, 88, 66, 90, 74, 71, 29, 7, 39, 29, 26, 77, 43, 52, 84, 12, 50, 16, 73, 10, 1, 44, 94, 96, 98, 50, 66, 59, 46, 14, 36, 39, 93, 98, 69, 6, 35, 39, 1, 57, 23, 10, 86, 55, 74, 39, 19, 10, 81, 71, 35, 73, 5, 11, 84, 72, 93, 95, 52, 94, 43, 2, 18, 34, 15, 52, 70, 77, 83, 47, 54, 44, 9, 67, 16, 41, 71, 85, 34, 56, 95, 32, 71, 25, 100, 74, 12, 8, 46, 81, 80, 90, 41, 11, 49, 22, 27, 99, 42, 44, 23, 61, 75, 71, 6, 13, 50, 98, 34, 71, 3, 42, 87, 65, 100, 65, 70, 20, 46, 83, 26, 87, 57, 31, 11, 32, 72, 82, 45, 85, 11, 10, 9, 86, 15, 61, 20, 75, 98, 24, 18, 10, 93, 97, 16, 52, 41, 92, 77, 48, 51, 25, 66, 66, 66, 10, 77, 26, 76, 23, 4, 84, 49, 99, 56, 16, 47, 43, 93, 99, 36, 80, 68, 12, 46, 63, 35, 11, 54, 92, 57, 28, 54, 29, 18, 5, 74, 84, 34, 16, 63, 25, 90, 72, 80, 97, 17, 91, 71, 5, 88, 84, 71, 3, 68, 34, 86, 66, 11, 54, 80, 12, 91, 46, 67, 51, 37, 34, 7, 76, 79, 53, 97, 75, 32, 46, 57, 56, 8, 94, 60, 46, 34, 82, 47, 28, 76, 79, 4, 75, 97, 78, 25, 20, 95, 52, 37, 43, 82, 98, 5, 34, 57, 22, 72, 4, 27, 84, 5, 24, 79, 48, 90, 28, 64, 17, 2, 57, 31, 69, 37, 90, 1, 62, 19, 28, 63, 86, 87, 85, 55, 12, 50, 65, 39, 73, 27, 51, 74, 84, 91, 89, 53, 9, 23, 69, 19, 66, 9, 45, 68, 98, 72, 88, 85, 48, 15, 74, 53, 6, 5, 32, 56, 60, 43, 19, 61, 87, 11, 100, 79, 60, 46, 79, 72, 98, 99, 61, 42, 27, 54, 86, 61, 96, 48, 62, 35, 54, 27, 29, 17, 91, 40, 11, 40, 5, 78, 5, 75, 91, 85, 36, 72, 35, 88, 23, 19, 3, 33, 27, 9, 19, 77, 59, 22, 8, 8, 74, 5, 93, 17, 60, 52, 90, 93, 18, 98, 98, 78, 15, 35, 70, 76, 99, 82, 26, 86, 61, 58, 62, 72, 13, 90, 63, 13, 50, 87, 34, 15, 23, 1, 48, 82, 58, 84, 25, 93, 46, 91, 64, 3, 60, 34, 89, 30, 97, 12, 48, 37, 46, 84, 63, 92, 22, 13, 28, 33, 47, 91, 17, 68, 56, 63, 28, 20, 100, 26, 67, 100, 78, 51, 21, 78, 39, 25, 60, 24, 24, 58, 56, 36, 46, 61, 43, 24, 26, 91, 57, 59, 1, 96, 37, 82, 85, 71, 27, 7, 99, 66, 20, 5, 63, 55, 73, 28, 72, 99, 74, 46, 4, 12, 40, 62, 95, 8, 7, 10, 36, 29, 77, 3, 30, 90, 1, 87, 92, 85, 63, 78, 83, 66, 39, 36, 30, 2, 95, 48, 70, 52, 42, 67, 90, 59, 66, 81, 79, 33, 59, 55, 42, 19, 39, 16, 19, 73, 13, 19, 61, 85, 13, 37, 53, 84, 13, 60, 94, 65, 46, 55, 86, 28, 42, 44, 60, 7, 48, 63, 80, 45, 11, 96, 8, 87, 86, 85, 25, 79, 15, 50, 34, 76, 10, 33, 36, 87, 60, 39, 25, 79, 18, 39, 12, 64, 11, 67, 29, 100, 82, 54, 78, 38, 59, 59, 96, 94, 59, 93, 42, 32, 61, 7, 33, 9, 15, 82, 56, 21, 14, 74, 22, 66, 68, 31, 20, 1, 53, 94, 47, 90, 82, 87, 55, 41, 11, 40, 53, 84, 42, 27, 15, 26, 40, 38, 60, 47, 50, 43, 92, 92, 62, 63, 19, 46, 39, 86, 89, 19, 40, 2, 33, 18, 42, 70, 69, 7, 93, 78, 62, 44, 80, 13, 50, 93, 85, 28, 64, 7, 87, 89, 96, 82, 31, 45, 87, 88, 24, 88, 23, 29, 2, 29, 40, 73, 87, 46, 57, 46, 57, 44, 76, 10, 85, 21, 26, 37, 34, 81, 87, 84, 20, 1, 9, 7, 42, 43, 91, 39, 52, 83, 21, 68, 69, 16, 93, 75, 44, 78, 43, 99, 10, 31, 10, 66, 81, 49, 70, 57, 20, 14, 87, 32, 16, 57, 28, 37, 2, 20, 91, 30, 81, 33, 11, 53, 5, 97, 51, 12, 96, 64, 13, 13, 6, 20, 87, 100, 86, 10, 50, 60, 50, 24, 39, 65, 39, 21, 94, 51, 16, 46, 74, 34, 93, 87, 51, 16, 47, 11, 25, 38, 5, 1, 1, 41, 73, 11, 28, 67, 72, 90, 55, 77, 42, 73, 19, 19, 47, 63, 78, 15, 49, 12, 82, 98, 32, 83, 93, 71, 17, 19, 49, 80, 40, 63};
				int id2[] = {29, 16, 85, 33, 60, 45, 25, 30, 80, 63, 77, 47, 80, 8, 32, 23, 24, 42, 74, 67, 42, 92, 67, 8, 85, 43, 10, 43, 95, 65, 52, 61, 2, 28, 24, 87, 9, 83, 46, 13, 87, 90, 51, 90, 36, 95, 83, 59, 33, 69, 15, 3, 89, 48, 76, 95, 75, 94, 81, 97, 8, 64, 84, 98, 52, 33, 32, 31, 23, 84, 81, 96, 61, 12, 95, 65, 57, 63, 68, 78, 56, 85, 58, 88, 42, 8, 94, 76, 69, 6, 75, 29, 11, 11, 83, 64, 100, 22, 54, 39, 18, 41, 16, 28, 45, 37, 41, 83, 98, 43, 75, 53, 95, 34, 43, 17, 73, 38, 1, 89, 74, 3, 53, 37, 2, 90, 31, 9, 16, 36, 6, 39, 23, 6, 81, 8, 64, 91, 51, 19, 87, 30, 17, 36, 77, 15, 56, 58, 68, 66, 54, 69, 14, 43, 91, 77, 44, 47, 92, 35, 16, 30, 43, 86, 53, 16, 31, 99, 54, 83, 55, 88, 38, 37, 45, 76, 19, 25, 95, 29, 32, 15, 33, 27, 62, 97, 43, 87, 92, 98, 5, 17, 68, 38, 55, 67, 83, 94, 49, 3, 14, 12, 72, 71, 99, 99, 91, 72, 35, 60, 42, 21, 32, 2, 41, 94, 46, 56, 98, 46, 25, 55, 70, 13, 93, 97, 62, 89, 22, 33, 26, 21, 53, 61, 55, 50, 91, 1, 23, 23, 12, 57, 44, 22, 42, 72, 47, 55, 52, 16, 99, 4, 24, 19, 21, 25, 95, 30, 91, 55, 83, 100, 34, 57, 72, 59, 31, 62, 95, 42, 29, 36, 81, 18, 42, 30, 79, 21, 86, 86, 96, 26, 88, 76, 45, 7, 90, 93, 71, 79, 24, 16, 75, 57, 46, 57, 46, 72, 70, 37, 50, 66, 56, 9, 92, 95, 75, 77, 82, 65, 59, 51, 60, 87, 89, 10, 75, 31, 29, 51, 84, 71, 47, 69, 10, 53, 82, 45, 76, 40, 14, 39, 78, 18, 45, 54, 69, 34, 18, 88, 78, 7, 56, 20, 3, 38, 67, 23, 79, 98, 7, 30, 20, 60, 38, 39, 81, 42, 77, 13, 76, 26, 59, 72, 38, 45, 79, 41, 99, 13, 74, 9, 21, 91, 2, 86, 37, 85, 1, 5, 23, 19, 47, 6, 53, 31, 28, 28, 59, 83, 100, 75, 72, 67, 16, 31, 36, 95, 68, 23, 34, 3, 6, 9, 22, 85, 72, 100, 75, 86, 9, 2, 80, 27, 74, 18, 7, 6, 94, 90, 85, 74, 29, 47, 96, 22, 43, 27, 23, 83, 84, 97, 91, 1, 86, 90, 52, 27, 45, 99, 31, 61, 7, 64, 65, 62, 58, 75, 20, 75, 67, 53, 61, 44, 35, 87, 64, 61, 70, 53, 94, 90, 83, 76, 93, 98, 62, 36, 66, 2, 71, 64, 30, 56, 15, 4, 51, 61, 85, 55, 44, 59, 51, 83, 78, 71, 9, 95, 13, 14, 1, 7, 41, 25, 91, 23, 70, 85, 30, 42, 98, 43, 68, 37, 46, 92, 32, 39, 21, 88, 2, 92, 99, 68, 82, 30, 16, 94, 53, 19, 13, 22, 13, 95, 76, 62, 58, 16, 69, 60, 66, 77, 23, 33, 83, 16, 70, 5, 85, 87, 32, 5, 75, 91, 77, 43, 31, 19, 91, 54, 73, 68, 62, 82, 7, 32, 82, 30, 80, 47, 7, 87, 5, 83, 37, 67, 82, 76, 55, 21, 21, 35, 82, 64, 100, 23, 57, 9, 2, 66, 77, 68, 25, 47, 72, 5, 13, 46, 43, 82, 69, 71, 88, 16, 60, 21, 91, 49, 45, 6, 90, 41, 84, 87, 64, 70, 95, 41, 7, 49, 71, 60, 14, 99, 59, 24, 35, 76, 92, 69, 69, 84, 69, 79, 51, 27, 51, 16, 100, 72, 91, 99, 5, 9, 65, 85, 6, 43, 36, 26, 83, 24, 73, 25, 63, 34, 47, 55, 74, 54, 12, 69, 20, 85, 42, 19, 88, 6, 39, 75, 22, 19, 12, 63, 22, 75, 40, 1, 52, 60, 71, 69, 93, 91, 35, 31, 72, 78, 32, 81, 53, 22, 35, 36, 67, 94, 22, 82, 60, 48, 69, 28, 88, 86, 39, 62, 11, 69, 16, 13, 96, 93, 15, 5, 80, 80, 89, 53, 92, 51, 83, 84, 36, 88, 14, 70, 20, 79, 56, 19, 26, 32, 18, 75, 53, 75, 36, 50, 85, 5, 20, 69, 32, 24, 54, 94, 28, 74, 68, 42, 94, 2, 37, 70, 50, 42, 69, 50, 52, 25, 51, 63, 46, 35, 41, 3, 92, 82, 39, 72, 26, 46, 8, 43, 65, 13, 52, 75, 57, 23, 7, 38, 91, 92, 47, 71, 62, 64, 93, 51, 44, 55, 82, 42, 90, 18, 41, 26, 71, 96, 91, 52, 38, 96, 87, 64, 16, 91, 64, 1, 61, 93, 37, 30, 77, 3, 42, 19, 37, 59, 32, 49, 91, 86, 70, 92, 93, 80, 29, 65, 74, 99, 36, 63, 1, 58, 89, 62, 65, 62, 53, 55, 98, 31, 87, 16, 47, 75, 27, 86, 86, 76, 90, 8, 45, 51, 56, 53, 30, 26, 20, 92, 13, 70, 63, 8, 14, 99, 91, 96, 82, 80, 47, 97, 47, 79, 10, 92, 8, 20, 51, 6, 50, 83, 29, 15, 10, 7, 93, 16, 40, 12, 66, 80, 52, 94, 3, 5, 5, 11, 53, 96, 51, 16, 51, 17, 97, 73, 92, 56, 96, 10, 24, 83, 88, 82, 76, 78, 28, 93, 61, 91, 12, 48, 57, 54, 82, 43, 86, 51, 82, 52, 17, 80, 39, 88, 73, 67, 43, 35, 34, 24, 80, 37, 36, 21, 31, 64, 42, 15, 2, 83, 89, 87, 45, 94, 47, 42, 23, 80, 67, 22, 30, 9, 95, 35, 38, 79, 8, 95, 37, 1, 84, 13, 91, 93, 54, 78, 93, 30, 14, 95, 6, 44, 7, 88, 50, 78, 82, 26, 96, 43, 26, 98, 36, 17, 91, 30, 51, 55, 77, 74, 87, 38, 29, 74, 29, 24, 75, 85};
				string op[] = {};
				string rl[] = {};
				int val[] = {324278, -97534, 136576, 75347, 3368508, 32088, 7050956, 49272, 4018992, 10812, 3680571, 9761550, 4393543, 54828, 80237, 5091567, 7711, 8271480, -22742, 54103, 56377, 182918, 86414, 521279, 153644, 109899, -61305, 49459, 2548251, 9275, -24087, 6005399, 19236, 21437, 12019, 111045, 181724, 48585, 5744692, -29920, 185794, 76680, 94824, 76935, 5292749, 982962, 4784951, 91172, -52855, 155409, 44964, 26735, 13570, 7530925, 9288, 71930, -71969, 2348227, 8521259, 85112, 1520942, 49034, 85390, 44709, 78425, 1171855, 89057, 16381, 113646, 3090197, 172121, 348, 2837941, 96139, 57592, 196089, 145275, 6885037, 189250, 98965, 95414, 139958, 8014695, 7273, 96901, 7506996, 177319, 5806520, 49321, 4695567, 4941, 2818515, 39584, 32563, 7924940, 32109, 72995, 154657, 8745809, 67560, -20035, 93575, 23200, 107517, 56524, 1656377, 32244, 196231, 30771, 5772, 77274, 191845, 13777, 65240, 9062036, 58614, -30468, 184539, 140835, 1452045, 3707480, 80754, 90684, 3625572, -65555, 156295, 81445, 162293, 276, 119656, 62809, 42496, 17321, 538, 5946189, 44125, 878095, 1035309, -73489, 1526384, 24368, 10497, 720525, 82437, 15546, 3030951, 50168, 88290, 86908, -3644, 5210497, 169173, 105465, 59963, 6296276, 25230, 83287, -41966, 4596136, 4562370, 21117, 62167, 94256, 31068, 45707, 6178185, -88965, 9153, -59365, 24120, 7533777, 63784, 155735, 47453, 85889, 92892, 40389, 9153906, 8163698, 165436, 3430374, 6706, 22665, 69153, 125027, 28569, 209991, 9555857, 20679, 67038, 4744879, 8640245, 49369, -83504, 423999, 77819, 11254, 106754, 4860083, 6672029, 66447, 55858, 90079, 183962, 7752215, 8785811, -85639, 3984771, -46189, 89469, 34701, 16310, 8661857, 69113, 52061, 119189, 98325, 78058, 18145, 65700, -41258, 73023, 8481175, 24764, 6090, 101902, 117306, 184809, 6830319, 5534062, -22711, 3921, 17931, 2197048, 46988, 83904, 86808, 83079, 39585, -3735, 7398680, 16436, 3764, 1847172, 3088302, 88793, 42963, 52036, 68501, 156371, 178936, 9741466, 116603, 15237, 155275, 48012, -81993, 35817, 2928974, 180413, 8262, 39587, -27637, 187730, 76932, 8629, 46975, 86890, 56550, 94727, -44633, 22467, 1838814, 15340, 9375, 78693, 84733, -69694, 6238620, 81919, 118131, 61214, 48697, 2499417, 62959, 7488848, 37151, -11544, 28854, 8162838, 14985, 54112, 7034, 58737, 150086, 87014, 662, 1371833, 87512, 8860011, 5897059, -34068, 43622, 3159588, 128653, 25297, 2962104, 2189200, 8852547, 96861, 83653, 1720906, 41215, 24941, 80619, 62014, -39178, 3758244, 90001, 63377, 8873265, 1620317, 137108, 8169459, 77983, 10823, 100519, 144144, 1273, 4047, -25595, -39692, 64481, 14390, 6173004, 49495, 2944727, 4391810, 21989, -75395, 13530, -254, 6802618, 40275, 42358, 53471, -54985, 4954882, -58337, 10408, 35044, -16452, 9712, 73608, 3026204, 49743, 2861960, 8183533, 4306018, 5978, 88258, -89426, 99592, 15002, -49203, 4465, 63929, -83575, -52890, 51029, 8178760, 3323173, 1136989, 49847, 89253, 16424, 80175, 8606750, 9799040, 190081, 3347067, 88517, 4719502, 112055, -79442, -79767, 9856279, 26087, 1516275, 7195848, 6721663, -23814, -79008, -75230, 66743, 21124, 8061973, 7319950, -7621, 3606, 9524, 68403, 88076, 117806, 52966, 10748, 90394, 94250, 56091, 22659, 17056, 1418616, 44203, 72271, 161901, 15672, 26128, 20085, 4930603, 5256345, 35306, 67522, 4032244, -4405, 40081, -97749, 27270, -55265, 6447836, 6340289, 106629, -45378, 75633, 39480, 4085, 351035, -14712, 68566, 1725956, -65181, 22956, 1240099, 8938476, 4602236, -70890, 115444, 42251, 8332987, 45727, 185929, 21528, 96046, -9339, 2557180, 3323938, 50867, 8969187, 9922385, 4704275, 74096, 42202, 96153, 6121905, 185341, 164784, 15216, 61593, 3260706, 6401036, 9666, 162831, 113974, 89414, 9520841, 1803027, 34271, 23028, 5068628, 71628, 3525510, 1112416, -64677, 8810359, 52409, 139541, 89667, 6192065, 25624, 87054, 2777521, 63653, 2200, 149370, 80672, 99609, 28831, 72919, 121571, 2310698, 91157, 96316, 81668, 3713712, 18997, 16809, 8797061, 99948, 9584623, 8875849, -45238, 21515, 1825749, 1544584, 6149784, 49089, 69629, 57429, 71781, 1804169, -37264, 60640, 79861, 20955, 70389, 24402, 162886, 35140, 82513, 47168, 431090, 104427, -85176, 27876, 35497, 113665, -51167, 109692, 43864, 86796, 38985, 565725, 10720, 7562523, 55908, 7324495, 11801, 162972, -59795, 180927, -87237, 25720, 159629, 9722961, 8503355, 3186786, 94692, 195953, 7103325, -61523, 2251897, -57159, 1586985, 142166, -90228, 41867, 18290, 45926, 2887180, 47725, 32139, 4506993, 7254684, 96744, -79415, 15697, 21767, -67232, 4442, 8568013, 29918, 34132, 1959280, 7416492, 158372, 54082, 38303, 62223, -23303, 45181, -1034, 22724, 41444, -21667, 27462, 76449, 41220, -96838, 4613250, -38597, -98190, 189331, -24772, 34773, 9047100, 66970, 101921, -90667, 75905, 6031791, 7213561, -72562, 99719, 1232947, 87051, 1439051, 46769, 13876, -12771, -34069, 8385287, 9472739, 57691, 70713, 1088036, 9814768, -92041, 145846, 96048, 6325993, 40017, -69276, 40543, 43447, 165779, 15638, 9150775, 2988212, -159, 7080379, 5703736, 91915, -12214, -50050, 194428, 1280206, 19241, 6188191, 54150, 106422, 7147, 4192344, 2736693, 63841, 8479416, 78220, -62570, 40437, 9722127, 42794, 26023, 43119, 4674929, 4140957, 71328, 60813, 175688, 602933, 26539, 61887, 50489, 1546462, 86964, 4340445, 14875, 30933, 58556, 3950862, 184131, -28178, -59438, 6464050, 83705, 1743305, 130801, 18417, 181497, 9798040, 8908023, 16202, 96077, -3070, 82563, 30010, 4090564, 8767286, 36916, 30053, 14262, 1137440, 3944196, 11612, 86713, 20519, -40395, 101357, 51169, 446770, 60312, 35158, -79693, -42941, 1332031, 225873, -90385, 67913, 86579, 92848, 48157, 8686650, 65200, 45341, 34910, 48442, 3080700, 53056, 50661, 133573, 16883, 95668, 44696, 133308, -81615, 5791946, 3331804, 2898, 5250920, 29720, 40038, 113728, 86223, 6179324, 2220142, -13003, 82816, -71669, 23429, 7683557, 54760, 99418, 8168069, 123832, 8717932, 77344, 893042, 12587, -35581, 119563, 7127522, 1741661, 5187, 88506, 148587, 16651, -68469, 172194, -8142, 108203, 8084, 51241, 87644, 1132564, 16900, 64064, -77257, 52279, 32661, 50201, 80657, 127194, 79753, 6714793, 2015756, -20302, 2333981, 81389, 166726, 4481337, 65664, 171853, 92632, 76829, -88290, 78480, 1816592, -72114, 76904, 2776, 82012, 11332, 131841, -90069, 7576863, 47673, 56214, 94235, 6684564, 33821, 2698607, 60929, 21998, 67915, 89604, 110916, 7689291, 98594, 2300299, 31747, 2284031, 24200, -51497, 77008, 34865, 45015, 19352, 29227, 2353074, 19440, 21069, 2830444, -6056, 5874853, 11376, 6294, -81959, 3156039, 1068087, 87308, 4777791, 106162, 187854, 1776, -67885, 15888, 125043, 55000, 9566828, 6225897, 8663209, 68010, -64146, 3640999, 3443638, 5070774, 175958, 1813748, 5034644, 75995, 47916, 163133, 18531, -18177, -13110, 5764995, 21577, 70313, -47738, 16991, 180085, 44433, 1756107, 53935, -12252, 83558, 843313, 84982, 7724493, -59567, 105568, -33904, 660024, 4778410, 10529, 63284, 227961, 8642833, 3868394, 90598, 112510, 2914902, 45622, 2659212, 90354, 4893417, 90767, 6726615, 4345632, 98994, 63400, 8994, 46198, 4386916, 1054692, 167058, 81141, 187097, -30219, 41754, 5519447, -29896, 4952141, 73586, 1332, 113629, 78403, 115141, 130037, 93471, 3270846, 58113, 70006, 86019, 761506, 37879, -19892, 78078, 7210980, 58621, -99742, -36242, 7710177, 24667, -69286, 15938, 198966, 81840, 4380890, 7905100, 67432, -14573, 8350212, 97339, 29595, 75917, 57206, 21018, 47453, 149946, 187659, 33452, 48331, 2258038, 197682, 41530, 112542, 625582, 8291, 125155, 98378, 2983, 46102, 25210, 55688, 1274, 48847, 155604, 94936, 1967378, 13044, 8866208, 18775, 7439415, 46722, 14730, 7579, 1359471, 7536575, -46536, 20230, 32051, 175057, 83759, 139726, 39551, 26114, 14017, 55809, 19905, 18431, 15220, 5195268, 6782159, 7318655, 87972, 58109, 6215698, 78906, 6003990, 5726166, 62287, 34880};
				int __expected[] = {73, 39, 94, 63, 97, 66, 6, 39, 9, 42, 11, 46, 94, 29, 15, 80, 100, 89, 56, 63, 35, 31, 48, 48, 74, 45, 72, 12, 15, 1, 14, 63, 35, 100, 60, 23, 33, 66, 1, 84, 37, 35, 85, 29, 66, 1, 50, 85, 17, 70, 75, 54, 58, 90, 68, 25, 67, 39, 50, 52, 14, 34, 54, 24, 66, 82, 81, 48, 78, 33, 36, 4, 38, 1, 77, 29, 20, 42, 9, 70, 40, 3, 64, 54, 66, 46, 95, 27, 53, 100, 30, 46, 63, 89, 69, 100, 52, 75, 17, 3};
				_expected = vector <int>(__expected, __expected+sizeof(__expected)/sizeof(int));
				_received = _obj.possibleSolution(n, vector <int>(id1, id1+sizeof(id1)/sizeof(int)), vector <int>(id2, id2+sizeof(id2)/sizeof(int)), vector <string>(op, op+sizeof(op)/sizeof(string)), vector <string>(rl, rl+sizeof(rl)/sizeof(string)), vector <int>(val, val+sizeof(val)/sizeof(int))); break;
			}
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		double _elapsed = (double)(clock()-_start)/CLOCKS_PER_SEC;
		if (_received == _expected)
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout << "           Expected: {";
			for (unsigned i = 0; i < _expected.size(); i++)
			{
				if (i) cout << ",";
				cout << " " << _expected[i];
			}
			cout << " }" << endl;
			cout << "           Received: {";
			for (unsigned i = 0; i < _received.size(); i++)
			{
				if (i) cout << ",";
				cout << " " << _received[i];
			}
			cout << " }" << endl;
		}
	}
}

// END CUT HERE
