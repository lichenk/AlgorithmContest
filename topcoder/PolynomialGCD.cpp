#include <bits/stdc++.h>
#include <assert.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define PB push_back
#define MP make_pair
#define MOD 1000000007LL
#define MAXN 10003
#define MAXLOGN 15
#define INF 9223372036854775807LL
bool a[MAXN+1];
vector<ll> pv;
ll b[MAXN+1];
ll g[MAXLOGN+1][MAXN+1];
void sieve() {
	for (ll i = 0; i <= MAXN; i++) a[i] = true;
	a[0] = false; a[1] = false;
	ll lim = sqrt(MAXN)+1;
	for (ll i = 2; i <= lim; i++) {
		if(a[i]) {
			for (ll j = i*i; j <= MAXN; j+=i) {
				a[j] = false;
			}
		}
	}
	for (ll i = 2; i <= MAXN; i++) {
		if (a[i]) pv.PB(i);
	}
}

ll modexp(ll base, ll e) {
	ll ans = 1;
	while(e > 0) {
		if (e % 2 == 1) {
			ans = (ans * base) % MOD;
			e--;
		}
		else {
			base = (base*base) % MOD;
			e /= 2;
		}
	}
	return ans;
}
ll binom(ll n, ll k) {
	ll denom = (invfact[n-k]*invfact[k])%MOD;
	return (fact[n]*denom)%MOD;
}
void init() {
	fact[0] = 1;
	for (ll i = 1; i < MAXF; i++) {
		fact[i] = (fact[i-1] * i)%MOD;
	}
	for (ll i = 0; i < MAXF; i++) {
		invfact[i] = inv(fact[i]);
	}
}
class PolynomialGCD {
	public:
	int gcd(string s) {
		sieve();
		ll n = s.size();
		for (ll i = 0; i < n; i++) {
			b[i] = s[i] - '0';
		}
		ll ans = 1;
		for (auto&p: pv) {
			if (p > n) continue;
			ll elim = -1;
			ll ppowlim = -1;
			{
				ll ppow = p;
				ll e = 0;
				while(ppow <= n) {
					assert(e <= MAXLOGN);
					ll xlim = min(n,ppow);
					for (ll x = 0; x < xlim; x++) {
						ll sum = 0;
						for (ll y = x; y < n; y += ppow) {
							sum += b[y];
						}
						g[e][x] = sum;
						//printf("p:%lld e:%lld x:%lld sum:%lld\n",p,e,x,sum);
					}
					ppow *= p;
					e++;
				}
				elim = e-1;
				ppowlim = ppow/p;
			}
			ll ex = INF;
			//printf("p:%lld pplim:%lld elim:%lld\n",p,ppowlim,elim);
			{
				ll initlim = min(ppowlim,n);
				for (ll init = 0; init < initlim; init++) {
					ll sum = 0;
					ll ppow = ppowlim;
					ll num = 0;
					for (ll y = init; y < n; y += ppow) {
						num++;
					}
					ll add = 0;
					if (num >= p) {
						add = INF;
						for (ll y = init; y < n; y += ppow) {
							add = min(add, b[y]);
						}
					}
					sum += add;
					for (ll e = elim; e >= 0; e--,ppow/=p) {
						ll x = init % ppow;
						if (x < n) {
							sum += g[e][x];
						}
						//printf("Add e:%lld x:%lld g:%lld\n",e,x,g[e][x]);
					}
					//printf("init:%lld sum:%lld\n",init,sum);
					ex = min(ex, sum);
				}
			}
			ll tomul = modexp(p, ex);
			ans = (ans * tomul) % MOD;
		}
		return ans;
	}
};
// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	if (argc == 1) 
	{
		cout << "Testing PolynomialGCD (500.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1451023437;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 500.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		PolynomialGCD _obj;
		int _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				string s = "131";
				_expected = 24;
				_received = _obj.gcd(s); break;
			}
			case 1:
			{
				string s = "00000";
				_expected = 1;
				_received = _obj.gcd(s); break;
			}
			case 2:
			{
				string s = "2014";
				_expected = 16;
				_received = _obj.gcd(s); break;
			}
			case 3:
			{
				string s = "31415926535";
				_expected = 659897170;
				_received = _obj.gcd(s); break;
			}
			case 4:
			{
				string s
				_expected = 794949223;
				_received = _obj.gcd(s); break;
			}
			case 5:
			{
				string s = "23036";
				_expected = 256;
				_received = _obj.gcd(s); break;
			}
			case 6:
			{
				string s = "11111111";
				_expected = 40320;
				_received = _obj.gcd(s); break;
			}
			case 7:
			{
				string s = "1111111111";
				_expected = 3628800;
				_received = _obj.gcd(s); break;
			}
			case 8:
			{
				string s = "8444115";
				_expected = 69672960;
				_received = _obj.gcd(s); break;
			}
			case 9:
			{
				string s = "5056556046294091012486650305522195891012093267230286739137848830274466995003650170831569074204605131116628660685010110841621035949067567711130643126933602091557230993614840809174721355273486282757647813928405233451410548470055305071555325161453765739215479090218528438978180795667253546657299044476806425583556689304797902996967507853169232281490511408745024498472357523294120070441743484104458417745904645623673747417994765837287902423102985798473679899054054881182825448018698933756372218631866095321414140382435850846530377401783975990012238171043197646026568581982452810363106728760936403110622035909173526976272846038319061076997521469208053681528888177281221706856203989804352890241320725886438038249253885116296801739025914350611272277102994395256174605256328337598815469852996996415602362398818387855656850836901577773286597537120406868620983393143746461812262266584614650441879861167680556473927167950099265211116523933811432265954527393932006403821308982651836615556917825106546009136515353";
				_expected = 333402496;
				_received = _obj.gcd(s); break;
			}
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		double _elapsed = (double)(clock()-_start)/CLOCKS_PER_SEC;
		if (_received == _expected)
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout << "           Expected: " << _expected << endl;
			cout << "           Received: " << _received << endl;
		}
	}
}

// END CUT HERE
