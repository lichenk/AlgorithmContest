#include <bits/stdc++.h>
#include <assert.h>
using namespace std;
typedef long long ll;
typedef double ld;
#define PB push_back
#define MP make_pair
#define MOD 1000000007LL
const ll MAXN=408;
const ll MAXC=(MAXN*(MAXN-1))/2;
ld EPS = 1e-9;
ld p[MAXN];
ld x[MAXN];
ld y[MAXN];
ld s[MAXC];
pair<ld,ll> z[MAXN];
ld ans[MAXN];
vector<double> final;
ld intersect(ld a,ld b,ld c,ld d) {
	if (fabs(a-c)<EPS) return a;
	return (d-b)/(a-c);
}
const ld INF = 1e9;
class ReturnOfTheJedi {
	public:
	vector <double> minimalExpectation(vector <int> _x, vector <int> _p) {
		ll n=_p.size();
		for (ll i=0;i<n;i++) {
			ans[i]=1e18;
		}
		ll norm = log(100000);
		for (ll i=0;i<n;i++) {
			x[i]=_x[i];
			p[i] = (ld)_p[i]/((ld)100000);
			y[i]=log(p[i])-norm;
		}
		ll sn=0;
		for (ll i=0;i<n;i++) {
			for (ll j=i+1;j<n;j++) {
				s[sn]=(intersect(y[i],x[i],y[j],x[j]));
				sn++;
			}
		}
		s[sn]=-INF; sn++;
		s[sn]=INF; sn++;
		s[sn]=0; sn++;
		sort(s,s+sn);
		for (ll i=0;i<sn-1;i++) {
			ld r = (s[i]+s[i+1])/2;
			//printf("%f %f: %f\n",s[i],s[i+1],r);
			for (ll k=0;k<n;k++) {
				z[k]=MP(x[k]+r*y[k],k);
			}
			sort(z,z+n);
			ld prob=1;
			ld sum=0;
			for (ll num=0;num<n;num++) {
				ll k=z[num].second;
				prob *= p[k];
				sum += x[k];
				ans[num] = min(ans[num], sum*prob);
			}
		}
		for (ll j=0;j<n;j++) {
			final.PB(ans[j]);
		}
		return final;
	}
};
// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	if (argc == 1) 
	{
		cout << "Testing ReturnOfTheJedi (900.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1455555687;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 900.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		ReturnOfTheJedi _obj;
		vector <double> _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				int x[] = {100,200,300};
				int p[] = {50000, 20000, 20000};
				double __expected[] = {40.0, 20.000000000000004, 12.000000000000002 };
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}
			case 1:
			{
				int x[] = {200,100,500,300,400};
				int p[] = {100000, 100000, 100000, 100000, 100000};
				double __expected[] = {100.0, 300.0, 600.0, 1000.0, 1500.0 };
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}
			case 2:
			{
				int x[] = {2,2,100,100};
				int p[] = {100000,100000,10000,10000};
				double __expected[] = {2.0, 2.0000000000000004, 2.0200000000000005, 2.0400000000000005 };
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}
			case 3:
			{
				int x[] = {1,1,200,200};
				int p[] = {100000,100000,10000,10000};
				double __expected[] = {1.0, 2.0, 4.010000000000001, 4.0200000000000005 };
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}
			case 4:
			{
				int x[] = {1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000};
				int p[] = {90000,90000,90000,90000,90000,90000,90000,90000,90000,90000};
				double __expected[] = {9.0E8, 1.62E9, 2.1870000000000005E9, 2.6244000000000005E9, 2.952450000000001E9, 3.188646000000001E9, 3.348078300000001E9, 3.4437376800000014E9, 3.4867844010000014E9, 3.4867844010000014E9 };
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}
			case 5:
			{
				int x[] = {991797604, 988831041, 986619056, 985962999, 985767982, 983052205, 980892653, 975094249, 971322836, 971269626, 970316401, 969843201, 966779357, 964356029, 963998514, 962014196, 958507783, 952596594, 940747054, 937551627, 935081757, 931793440, 931776543, 927688998, 925375492, 923419514, 923373373, 922169214, 922025599, 921400931, 920597125, 920497872, 920364005, 917147399, 915927059, 915310568, 914979559, 911756060, 909116718, 908954744, 907905253, 904459916, 903648149, 899066785, 896991870, 896729853, 896666849, 892266679, 891130082, 886661788, 886476031, 884418199, 884029545, 881817872, 879141638, 878129471, 877024925, 874206872, 873023211, 870120953, 868574074, 868283399, 867444142, 867307167, 864279372, 850187616, 848645541, 845741294, 845183994, 844465597, 842635360, 842514750, 837441748, 835227025, 830679766, 826802783, 825237308, 822767691, 819862360, 818580509, 817683491, 813739930, 811595998, 810925285, 810249340, 808818014, 803264567, 801929605, 801231605, 798047035, 796351896, 795729308, 795188143, 790248356, 787890039, 787688898, 779968238, 774884605, 770767136, 770249410, 767662656, 765463925, 764091388, 763919031, 761974908, 761417095, 760771775, 756460485, 755593816, 754330764, 753838115, 753813691, 751202412, 751168112, 750158850, 749920439, 745804783, 744690791, 744360052, 740414217, 738921410, 735795257, 734585336, 728609515, 727792000, 727168999, 726990557, 726519827, 723180292, 721399052, 720822237, 719565402, 709629857, 708025709, 705955801, 701967296, 701832149, 697793992, 696455228, 694030568, 693733339, 692816351, 691620392, 689401406, 688554326, 684571881, 679657664, 673029413, 672305337, 669724611, 667712098, 664630986, 657810873, 641709625, 641672502, 637732277, 632942164, 631466021, 628979730, 627923477, 627281006, 625118160, 623288399, 619543895, 619144168, 619062225, 616437992, 615153676, 610569377, 610025785, 607897215, 607394277, 605531828, 597199129, 592850470, 588549755, 588240567, 586205454, 581793668, 577124234, 576726756, 567252095, 561005695, 555608014, 552332700, 551969118, 550277651, 542592522, 541205537, 538006414, 537144468, 536533060, 529804946, 529076156, 522969638, 521992031, 515238183, 511608123, 496202016, 493910790, 491623966, 486626100, 481934869, 481145891, 478423003, 477300276, 475935914, 475633283, 475328939, 474882237, 474489609, 458345224, 457097259, 456398625, 446684478, 443417961, 443092628, 436912428, 429368612, 427735940, 427204468, 423771950, 415615166, 414725176, 414650740, 413519423, 413195854, 412722007, 405093828, 405084648, 402461339, 387082188, 386693769, 386257681, 381788435, 380442961, 372134465, 370780557, 368229922, 366459340, 366012914, 354949006, 351976175, 351495824, 350840041, 341145853, 340270745, 330840090, 328692387, 322395624, 321834780, 321372914, 317821577, 317188673, 312755175, 311767033, 310367620, 309087005, 308663127, 308212089, 300814979, 291362612, 290101475, 284914150, 284004555, 283354970, 282540543, 280623978, 280613830, 278731744, 271662080, 270260563, 265043942, 263789006, 253250872, 249354337, 247448658, 243155573, 242722447, 238503188, 237236322, 233743353, 233383514, 230824730, 222681869, 221942865, 221568852, 214904208, 212423591, 212350263, 206129672, 201369320, 200592718, 198446896, 196645684, 195508008, 194590252, 194234560, 189387150, 188923512, 186382036, 176264529, 170598028, 169895153, 168617143, 166858735, 166805854, 166437881, 165476443, 163184656, 162618423, 161009191, 159790080, 158746132, 156491370, 153208966, 151474259, 150724873, 149635638, 142777340, 140583677, 140266206, 137737245, 136663665, 136455027, 135530771, 132239588, 132129925, 125755540, 124382347, 122377708, 113743723, 103777989, 103159270, 97190720, 96270589, 96055743, 95919678, 93772795, 93772039, 93407622, 92818104, 88795819, 87970247, 86548325, 80484440, 78853712, 77982031, 76104634, 74380775, 68170001, 68040269, 67974538, 63866324, 62996793, 59664238, 58687726, 58356902, 57472421, 57450668, 56184021, 55093069, 53971328, 52288453, 49419070, 49346337, 45930199, 44865551, 42300982, 41978071, 40839997, 39493530, 38631463, 36130965, 36058560, 35724870, 35363447, 32351405, 29724406, 27300384, 25463838, 24990981, 24810032, 23991025, 22690424, 22653064, 18805738, 16328075, 12762212, 12565383, 11794406, 11645696, 6959080, 5543299, 5178078, 3726662, 2469254, 1577213, 1537157, 884920};
				int p[] = {98501, 98502, 98503, 98506, 98506, 98507, 98508, 98509, 98509, 98510, 98512, 98520, 98521, 98525, 98525, 98525, 98527, 98529, 98534, 98534, 98535, 98538, 98541, 98541, 98544, 98544, 98548, 98550, 98557, 98557, 98566, 98571, 98573, 98577, 98585, 98585, 98589, 98590, 98590, 98591, 98597, 98611, 98618, 98622, 98623, 98624, 98625, 98630, 98630, 98631, 98631, 98631, 98632, 98635, 98637, 98639, 98640, 98640, 98642, 98643, 98654, 98655, 98656, 98656, 98660, 98663, 98664, 98666, 98667, 98667, 98671, 98675, 98675, 98677, 98677, 98678, 98684, 98691, 98693, 98699, 98700, 98700, 98702, 98702, 98704, 98705, 98709, 98712, 98713, 98717, 98720, 98725, 98731, 98732, 98735, 98737, 98737, 98744, 98744, 98745, 98746, 98749, 98749, 98754, 98757, 98760, 98764, 98769, 98769, 98770, 98779, 98784, 98786, 98786, 98787, 98798, 98798, 98799, 98800, 98803, 98803, 98804, 98808, 98812, 98817, 98817, 98818, 98818, 98821, 98824, 98825, 98827, 98836, 98836, 98837, 98838, 98843, 98846, 98848, 98853, 98853, 98854, 98855, 98855, 98857, 98858, 98859, 98860, 98866, 98868, 98871, 98873, 98878, 98888, 98893, 98894, 98894, 98904, 98905, 98912, 98923, 98924, 98927, 98929, 98930, 98934, 98936, 98937, 98939, 98940, 98942, 98942, 98943, 98944, 98948, 98952, 98957, 98960, 98962, 98965, 98974, 98976, 98979, 98983, 98986, 98993, 98995, 98997, 98997, 98999, 99002, 99003, 99004, 99006, 99008, 99008, 99015, 99016, 99023, 99027, 99028, 99029, 99030, 99034, 99034, 99037, 99039, 99041, 99049, 99050, 99051, 99051, 99052, 99054, 99057, 99063, 99065, 99065, 99066, 99067, 99069, 99069, 99070, 99071, 99073, 99076, 99076, 99080, 99082, 99083, 99087, 99088, 99088, 99089, 99090, 99097, 99100, 99102, 99103, 99107, 99108, 99109, 99119, 99125, 99126, 99131, 99134, 99135, 99138, 99140, 99142, 99142, 99146, 99147, 99147, 99150, 99152, 99152, 99155, 99159, 99160, 99161, 99173, 99177, 99177, 99178, 99181, 99184, 99186, 99186, 99187, 99188, 99189, 99190, 99190, 99190, 99190, 99202, 99206, 99206, 99210, 99212, 99215, 99217, 99217, 99217, 99222, 99226, 99231, 99236, 99241, 99243, 99243, 99247, 99251, 99251, 99254, 99256, 99265, 99268, 99269, 99272, 99273, 99274, 99279, 99280, 99282, 99286, 99292, 99292, 99295, 99297, 99301, 99301, 99306, 99306, 99307, 99311, 99319, 99323, 99323, 99326, 99330, 99331, 99332, 99337, 99337, 99340, 99346, 99346, 99348, 99352, 99352, 99353, 99359, 99360, 99361, 99362, 99363, 99365, 99368, 99371, 99374, 99374, 99381, 99386, 99388, 99388, 99390, 99390, 99392, 99393, 99394, 99395, 99396, 99398, 99400, 99401, 99401, 99402, 99414, 99417, 99419, 99419, 99432, 99433, 99434, 99436, 99441, 99450, 99451, 99452, 99456, 99457, 99460, 99463, 99464, 99465, 99470, 99473, 99478, 99478, 99480, 99481, 99482, 99483, 99485, 99485, 99486, 99487, 99488, 99491, 99492, 99492, 99493, 99493, 99493, 99495, 99495, 99497};
				double __expected[] = {880468.8524, 2397723.9882289153, 3939085.3971038717, 6338865.864832128, 9940164.163497869, 1.4912715343951495E7, 2.018686958245483E7, 2.6766501194198586E7, 3.7755659981620654E7, 4.8772127924360126E7, 6.040319956376057E7, 7.209808624426809E7, 8.70074298257294E7, 1.0406807743212685E8, 1.2451172431597659E8, 1.4477417159537783E8, 1.6601388266460654E8, 1.8777417508944973E8, 2.0946360445281178E8, 2.3134817469560537E8, 2.5463436847190762E8, 2.798246474527782E8, 3.070584417414673E8, 3.366500842791735E8, 3.662295440441071E8, 3.9576127524905676E8, 4.2501349312858254E8, 4.560931443427373E8, 4.875435499398469E8, 5.1978145553049695E8, 5.526127469006268E8, 5.852872302313474E8, 6.197040917931904E8, 6.545909347025911E8, 6.918955321224151E8, 7.288088333917007E8, 7.675380969652073E8, 8.07167452043416E8, 8.472043788888074E8, 8.876010845244468E8, 9.283998306244706E8, 9.68686490821536E8, 1.0091585609735558E9, 1.049361219991722E9, 1.0897882573472185E9, 1.1322629272732675E9, 1.174845959126261E9, 1.2200205821268756E9, 1.2646420822172933E9, 1.3087623555727546E9, 1.3569635695319915E9, 1.405822230012532E9, 1.4554059073068469E9, 1.5049764617612963E9, 1.555056409044987E9, 1.6088255981949728E9, 1.6627874962605617E9, 1.71660791366365E9, 1.7725270881454666E9, 1.8280407671147501E9, 1.8829463783805168E9, 1.9371167727399035E9, 1.9919680117395809E9, 2.0461146382588487E9, 2.0996154261302993E9, 2.152958360640963E9, 2.209473766784936E9, 2.265564710452441E9, 2.327553393103249E9, 2.3943292385942054E9, 2.4614195039157424E9, 2.5284374034402995E9, 2.598495477856986E9, 2.6675224756384406E9, 2.7376458911784687E9, 2.8071757579833093E9, 2.8757589688271713E9, 2.9439509623075E9, 3.012573835225592E9, 3.080243775647223E9, 3.148224251324744E9, 3.219251674302925E9, 3.2895692153921747E9, 3.3590863762828317E9, 3.4284973901678433E9, 3.4987559394297E9, 3.5690401849860706E9, 3.6387895860269217E9, 3.707957574544402E9, 3.7768374793115783E9, 3.8447742450131865E9, 3.9128799461151624E9, 3.9801379584288354E9, 4.0462305081795793E9, 4.111218001966084E9, 4.175951305003553E9, 4.2400340299003863E9, 4.303310529428766E9, 4.368501792989881E9, 4.437881523269528E9, 4.507339476290155E9, 4.575652834591791E9, 4.644874673041193E9, 4.712905941632091E9, 4.779999878606964E9, 4.846415727275539E9, 4.912299797331391E9, 4.9778149068300495E9, 5.042451220305941E9, 5.108121229558078E9, 5.1751320187314205E9, 5.241037767367864E9, 5.306358118175878E9, 5.37330710935894E9, 5.438975027134501E9, 5.503554235158837E9, 5.570676769833709E9, 5.637509321113626E9, 5.702946005846872E9, 5.768513833660952E9, 5.833040641049098E9, 5.898076325323218E9, 5.961745794061618E9, 6.025194991316076E9, 6.08807873042652E9, 6.1512795925267935E9, 6.2177011208427E9, 6.283128237297564E9, 6.349282893162099E9, 6.41448695750652E9, 6.481161266359587E9, 6.546993609075798E9, 6.611449072003219E9, 6.674886783075795E9, 6.73697429571266E9, 6.797787449263533E9, 6.857512585605097E9, 6.917274518239186E9, 6.9758915709412775E9, 7.036385515142103E9, 7.098045594821829E9, 7.158205528919768E9, 7.216958998272052E9, 7.274529303217994E9, 7.33098734468359E9, 7.386108261904285E9, 7.441409002115911E9, 7.495387337701335E9, 7.548898482130914E9, 7.601107468114943E9, 7.651912562463358E9, 7.703375736491805E9, 7.7539091032577505E9, 7.806224104919729E9, 7.85711829819372E9, 7.909317463172397E9, 7.960160687674602E9, 8.009529928526094E9, 8.057528176132744E9, 8.107516745840124E9, 8.156037424618392E9, 8.203292911980629E9, 8.249787751688525E9, 8.295053446033975E9, 8.341066899420773E9, 8.385724063683E9, 8.430031157855811E9, 8.472884550232606E9, 8.514374306565775E9, 8.558991698877761E9, 8.602443543493078E9, 8.644460830272793E9, 8.686769078899954E9, 8.727565003412985E9, 8.766945720837059E9, 8.80491225418178E9, 8.841428543694685E9, 8.87658344542845E9, 8.912443869126015E9, 8.947784693012314E9, 8.981725703488897E9, 9.014574599059114E9, 9.047966899306492E9, 9.0814991646699E9, 9.11370665520608E9, 9.144719927338408E9, 9.176575305293272E9, 9.207011292722065E9, 9.236265802432606E9, 9.26744658499657E9, 9.297287297054468E9, 9.325733807551834E9, 9.352771622133827E9, 9.378884533523474E9, 9.403801257766815E9, 9.427394951559294E9, 9.449694592166548E9, 9.47072654755742E9, 9.49119765595925E9, 9.511425741413002E9, 9.530785770207363E9, 9.548996925975925E9, 9.568688744763174E9, 9.587770093819687E9, 9.606338939299328E9, 9.62380667238387E9, 9.64105220614542E9, 9.657040564868E9, 9.672943204014034E9, 9.687646053131777E9, 9.70112162864096E9, 9.713697270056822E9, 9.725323469874136E9, 9.736595268042002E9, 9.746988122452213E9, 9.756306167952368E9, 9.764581605721601E9, 9.772045197671553E9, 9.779223039204716E9, 9.785988784202995E9, 9.792134673057535E9, 9.797346443574015E9, 9.80140867109862E9, 9.804670340398855E9, 9.80679478582075E9, 9.807871511398954E9, 9.80812799913045E9, 9.808474850437477E9, 9.807810765831762E9, 9.806243974139244E9, 9.80360955417602E9, 9.800016043404346E9, 9.795478680616848E9, 9.789883280667576E9, 9.783253525014437E9, 9.775693790926239E9, 9.732347399090076E9, 9.666372233628729E9, 9.60094729588457E9, 9.536012129378616E9, 9.47160768800377E9, 9.407636294647469E9, 9.34409858180677E9, 9.281064741806953E9, 9.218436942715025E9, 9.156330566166708E9, 9.094618323767893E9, 9.033300735574492E9, 8.972362384809555E9, 8.911809850422995E9, 8.851636903443989E9, 8.791876934390999E9, 8.732604762896734E9, 8.673710823502697E9, 8.615232702213148E9, 8.557123190398233E9, 8.499378988234459E9, 8.442036844619915E9, 8.385116552736615E9, 8.328726677518013E9, 8.272743547237671E9, 8.217139552500484E9, 8.161980691513242E9, 8.107310755273932E9, 8.053029283241004E9, 7.999367629704063E9, 7.946093611278119E9, 7.893194560746085E9, 7.840639244796594E9, 7.788488312694677E9, 7.736691860754652E9, 7.685277192377587E9, 7.634232899365372E9, 7.583513600351911E9, 7.533132282198333E9, 7.483121869802471E9, 7.433499332734053E9, 7.384260756392917E9, 7.335345662177933E9, 7.286762984261616E9, 7.238500621200738E9, 7.190569568564915E9, 7.142982113133623E9, 7.095706166898193E9, 7.048931129076254E9, 7.002497261425021E9, 6.956360442293489E9, 6.910547252353145E9, 6.865280474870331E9, 6.820642197630672E9, 6.776333970355043E9, 6.732333854036451E9, 6.688647974558859E9, 6.645364976984931E9, 6.602516564305881E9, 6.559977212629233E9, 6.51782998132016E9, 6.476064686401029E9, 6.434849443097625E9, 6.393931605978792E9, 6.353353200626186E9, 6.313029669626082E9, 6.273104790363342E9, 6.233447715545423E9, 6.194053239021987E9, 6.154907339417276E9, 6.1161255329987E9, 6.077816344350619E9, 6.040003379098853E9, 6.002493949472803E9, 5.965303021193674E9, 5.928407179177689E9, 5.891902272254459E9, 5.85565026588606E9, 5.819708477166084E9, 5.783988968614012E9, 5.748578822914251E9, 5.7134961375197935E9, 5.679007761797372E9, 5.644765242287165E9, 5.610749967170484E9, 5.577031624426765E9, 5.543662774446465E9, 5.510515242860262E9, 5.477612282885109E9, 5.445057184533325E9, 5.412705984650811E9, 5.380582200678256E9, 5.348689036331157E9, 5.317048608565276E9, 5.285641926117027E9, 5.254447124578832E9, 5.223463042428061E9, 5.192678680785613E9, 5.162081375956422E9, 5.131672779423937E9, 5.101454404226173E9, 5.071425098228948E9, 5.041576744951632E9, 5.011998367103992E9, 4.982733373152498E9, 4.953772532146944E9, 4.925004008700904E9, 4.896422450299244E9, 4.868292070109233E9, 4.840398302781424E9, 4.812679420075349E9, 4.78514107286231E9, 4.757766576002768E9, 4.730552835870791E9, 4.703501259857986E9, 4.676611451780919E9, 4.649880723244317E9, 4.623309991136299E9, 4.596902467739963E9, 4.570652636409966E9, 4.544601764797598E9, 4.518716157222003E9, 4.492998044407432E9, 4.4674500225435915E9, 4.442554201460654E9, 4.417905288281671E9, 4.393417843535529E9, 4.369103587361053E9, 4.345390094430459E9, 4.321814529304085E9, 4.298398789568687E9, 4.2751403054562306E9, 4.252165293158298E9, 4.2296893221582713E9, 4.207349703841389E9, 4.185141074454219E9, 4.163187024065082E9, 4.141359442849269E9, 4.119757500763562E9, 4.098384704943683E9, 4.0771341633750377E9, 4.056015502389645E9, 4.0351329575961437E9, 4.014429071599273E9, 3.993984855886301E9, 3.973654311189165E9, 3.9534880378870807E9, 3.9334294491270537E9, 3.9134955015758243E9, 3.8936663742584367E9, 3.8739409754442487E9, 3.854321470426744E9, 3.834818767309349E9, 3.815424440748012E9, 3.7961386414467764E9, 3.7769518726845336E9, 3.7578715150487485E9, 3.738890380246725E9, 3.7200292359532204E9, 3.701266717739524E9, 3.682604274907189E9, 3.6640366818828683E9, 3.645603876369343E9, 3.6272829057569537E9};
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}
			/*case 6:
			{
				int x[] = ;
				int p[] = ;
				double __expected[] = ;
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}*/
			/*case 7:
			{
				int x[] = ;
				int p[] = ;
				double __expected[] = ;
				_expected = vector <double>(__expected, __expected+sizeof(__expected)/sizeof(double));
				_received = _obj.minimalExpectation(vector <int>(x, x+sizeof(x)/sizeof(int)), vector <int>(p, p+sizeof(p)/sizeof(int))); break;
			}*/
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		double _elapsed = (double)(clock()-_start)/CLOCKS_PER_SEC;
		bool _passed = _expected.size() == _received.size();
		for (unsigned i = 0; i < _received.size(); i++)
			_passed = _passed && (abs(_expected[i]-_received[i]) < 1e-9 || (_received[i] > min(_expected[i]*(1.0-1e-9), _expected[i]*(1.0+1e-9)) && _received[i] < max(_expected[i]*(1.0-1e-9), _expected[i]*(1.0+1e-9))));
		if (_passed)
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout.precision(10);
			cout << "           Expected: {";
			for (unsigned i = 0; i < _expected.size(); i++)
			{
				if (i) cout << ",";
				cout << " " << _expected[i];
			}
			cout << " }" << endl;
			cout << "           Received: {";
			for (unsigned i = 0; i < _received.size(); i++)
			{
				if (i) cout << ",";
				cout << " " << _received[i];
			}
			cout << " }" << endl;
		}
	}
}

// END CUT HERE
