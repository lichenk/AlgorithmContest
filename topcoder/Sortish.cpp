#include <bits/stdc++.h>
#include <assert.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define PB push_back
#define MP make_pair
#define MOD 1000000007LL

const ll MAXMASK = 16384;
const ll MAXK = 16;
const ll MAXN = 2004;
const ll MAXFAC = 5040;
const ll UPLIM = 14000;
ll f[2][UPLIM];
vector<ll> given;
ll lt[MAXK][MAXK];
ll gt[MAXK][MAXK];
ll s[2][MAXFAC];
void inits(ll d, ll k, ll c, ll delta) {
	vector<ll> chosen;
	for (ll i=0;i<d;i++) {
		chosen.PB(i);
	}
	ll pidx=0;
	do {
		ll ans=0;
		for (ll i=0;i<d;i++) {
			for (ll j=i+1;j<d;j++) {
				if (chosen[i]<chosen[j]) ans++;
			}
		}
		s[c][pidx]=ans;
		pidx++;
	} while (next_permutation(chosen.begin(),chosen.end()));
}
void solve(ll d, ll k, ll c, ll delta, ll y) {
	vector<ll> chosen;
	for (ll i=0;i<k;i++) {
		if (y&(1ULL<<i)) {
			chosen.PB(i);
		}
	}
	ll pidx=0;
	do {
		ll ans=0;
		for (ll i=0;i<d;i++) {
			ll v = chosen[i];
			ll add = lt[delta+i][v]+gt[delta+i][v];
			ans += add;
		}
		ans += s[c][pidx];
		assert(0<=ans&&ans<UPLIM);
		f[c][ans]++;
		pidx++;
	} while (next_permutation(chosen.begin(),chosen.end()));
}
bool seen[MAXN];
class Sortish {
	public:
	long long ways(int sortedness, vector <int> seq) {
		ll n=seq.size();
		ll k=0;
		for (ll i=0;i<=n;i++) seen[i]=false;
		for (ll i=0;i<n;i++) {
			if (seq[i]==0) k++;
			else seen[seq[i]]=true;
		}
		for (ll i=1;i<=n;i++) {
			if (!seen[i]) given.PB(i);
		}
		{
			ll idx=0;
			for (ll j=0;j<k;j++) lt[idx][j]=0;
			for (ll i=0;i<n;i++) {
				if (seq[i]==0) {
					idx++;
					if (idx>=k) break;
					for (ll j=0;j<k;j++) {
						lt[idx][j]=lt[idx-1][j];
					}
					continue;
				}
				for (ll j=0;j<k;j++) {
					if (seq[i]<given[j]) {
						lt[idx][j]++;
					}
				}
			}
		}
		{
			ll idx=k-1;
			for (ll j=0;j<k;j++) gt[idx][j]=0;
			for (ll i=n-1;i>=0;i--) {
				if (seq[i]==0) {
					idx--;
					if (idx<0) break;
					for (ll j=0;j<k;j++) {
						gt[idx][j]=gt[idx+1][j];
					}
					continue;
				}
				for (ll j=0;j<k;j++) {
					if (seq[i]>given[j]) {
						gt[idx][j]++;
					}
				}
			}
		}
		for (ll idx=0;idx<k;idx++) {
			for (ll j=0;j<k;j++) {
				//printf("idx:%d j:%d lt:%d gt:%d\n",idx,j,lt[idx][j],gt[idx][j]);
			}
		}
		inits(k/2, k, 0, 0);
		inits(k-k/2, k, 1, k/2);
		ll final=0;
		ll mask = (1ULL<<k) - 1;
		ll alr=0;
		for (ll x=0;x<n;x++) {
			if (seq[x]==0)continue;
			for (ll y=x+1;y<n;y++) {
				if (seq[y]==0)continue;
				if (seq[x]<seq[y]) alr++;
			}
		}
		ll need=sortedness-alr;
		//printf("sortedness:%d alr:%d need:%d\n",sortedness,alr,need);
		ll dt=k/2;
		ll lim=1ULL<<k;
		for (ll y=0;y<lim;y++) {
			if (__builtin_popcountll(y)!=dt) continue;
			ll z = (~y)&mask;
			ll self=0;
			for (ll i=0;i<k;i++) {
				if (y&(1ULL<<i)) {
					for (ll j=i+1;j<k;j++) {
						if (z&(1ULL<<j)) self++;
					}
				}
			}
			for (ll i=0;i<2;i++) {
				for (ll v=0;v<UPLIM;v++) {
					f[i][v] = 0;
				}
			}
			solve(k/2, k, 0, 0, y);
			solve(k-k/2, k, 1, k/2, z);
			for (ll v=0;v<UPLIM;v++) {
				ll num = f[0][v];
				if (num==0) continue;
				ll acq = need-v-self;
				if (acq<0 || acq >= UPLIM) continue;
				ll other = f[1][need-v-self];
				//printf("y:%d z:%d v:%d self:%d acq:%d num:%d other:%d\n",y,z,v,self,need-v-self,num,other);
				final += (num * other);
			}
		}
		return final;
	}
};
// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	if (argc == 1) 
	{
		cout << "Testing Sortish (1000.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1455080505;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 1000.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		Sortish _obj;
		long long _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				int sortedness = 5;
				int seq[] = {4, 0, 0, 2, 0};
				_expected = 2LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 1:
			{
				int sortedness = 4;
				int seq[] = {0, 0, 0, 0};
				_expected = 5LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 2:
			{
				int sortedness = 2;
				int seq[] = {1, 3, 2};
				_expected = 1LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 3:
			{
				int sortedness = 3;
				int seq[] = {0, 0, 2, 0, 0, 0};
				_expected = 4LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 4:
			{
				int sortedness = 87;
				int seq[] = {2,0};
				_expected = 0LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 5:
			{
				int sortedness = 30;
				int seq[] = {0, 6, 3, 0, 0, 2, 10, 0, 0, 0};
				_expected = 34LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 6:
			{
				int sortedness = 100;
				int seq[] = {0, 13, 0, 0, 12, 0, 0, 0, 2, 0, 0, 10, 5, 0, 0, 0, 0, 0, 0, 7, 15, 16, 20};
				_expected = 53447326LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 7:
			{
				int sortedness = 1021183;
				int seq[] = {};
				_expected = 27332616LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			case 8:
			{
				int sortedness = 70;
				int seq[] = {8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0};
				_expected = 2539199134LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}
			/*case 9:
			{
				int sortedness = ;
				int seq[] = ;
				_expected = LL;
				_received = _obj.ways(sortedness, vector <int>(seq, seq+sizeof(seq)/sizeof(int))); break;
			}*/
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		double _elapsed = (double)(clock()-_start)/CLOCKS_PER_SEC;
		if (_received == _expected)
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout << "           Expected: " << _expected << endl;
			cout << "           Received: " << _received << endl;
		}
	}
}

// END CUT HERE
