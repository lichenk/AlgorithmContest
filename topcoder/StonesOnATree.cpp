#include "bits/stdc++.h"
#include <assert.h>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
#define PB push_back
#define MP make_pair
#define fst first
#define snd second
const ll MOD = 1000000007LL;
const ll INF = 1LL<<60LL;
template<typename T> inline bool chkmax(T &aa, T bb) { return aa < bb ? aa = bb, true : false; }
template<typename T> inline bool chkmin(T &aa, T bb) { return aa > bb ? aa = bb, true : false; }
vector<vector<int> > g;
int n;
vector<int> c;

bool cmp(pll fw1, pll fw2) {
	ll f1=fw1.fst,w1=fw1.snd;
	ll f2=fw2.fst,w2=fw2.snd;
	return w1+f2<w2+f1;
}

ll dfs(int x, int p) {
	vector<pll> fw;
	ll ans2=c[x];
	for (auto &y:g[x]) {
		if (y==p) continue;
		ll f=dfs(y,x);
		ll w=c[y];
		ans2+=w;
		fw.PB(MP(f,w));
	}
	sort(fw.begin(),fw.end(),cmp);
	ll ans1=0;
	ll prew=0;
	for (auto &gfw:fw) {
		ll f=gfw.fst,w=gfw.snd;
		chkmax(ans1,prew+f);
		prew+=w;
	}
	ll ans=max(ans1,ans2);
	//printf("x:%d ans1:%lld ans2:%lld\n",x,ans,ans2);
	return ans;
}
class StonesOnATree {
	public:
	int minStones(vector <int> p, vector <int> w) {
		c=w;
		n=p.size()+1;
		g.resize(n);
		for (int x=1;x<n;x++) {
			int y=p[x-1];
			g[x].PB(y); g[y].PB(x);
		}
		ll ans=dfs(0,-1);
		return ans;
	}
};
// BEGIN CUT HERE
#include <ctime>
#include <cmath>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;

int main(int argc, char* argv[])
{
	if (argc == 1) 
	{
		cout << "Testing StonesOnATree (250.0 points)" << endl << endl;
		for (int i = 0; i < 20; i++)
		{
			ostringstream s; s << argv[0] << " " << i;
			int exitCode = system(s.str().c_str());
			if (exitCode)
				cout << "#" << i << ": Runtime Error" << endl;
		}
		int T = time(NULL)-1520203148;
		double PT = T/60.0, TT = 75.0;
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		cout << endl;
		cout << "Time  : " << T/60 << " minutes " << T%60 << " secs" << endl;
		cout << "Score : " << 250.0*(.3+(.7*TT*TT)/(10.0*PT*PT+TT*TT)) << " points" << endl;
	}
	else
	{
		int _tc; istringstream(argv[1]) >> _tc;
		StonesOnATree _obj;
		int _expected, _received;
		time_t _start = clock();
		switch (_tc)
		{
			case 0:
			{
				int p[] = {0,1,2,3};
				int w[] = {1,2,2,4,4};
				_expected = 8;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}
			case 1:
			{
				int p[] = {0,0};
				int w[] = {1,2,3};
				_expected = 6;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}
			case 2:
			{
				int p[] = {0};
				int w[] = {100000,100000};
				_expected = 200000;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}
			case 3:
			{
				int p[] = {0,0,1,1,2,2};
				int w[] = {1,1,1,1,1,1,1};
				_expected = 4;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}
			case 4:
			{
				int p[] = {0,0,1,2,3,4,4,2,1,3,6,7};
				int w[] = {1,2,3,4,5,6,6,7,8,8,8,9,10};
				_expected = 22;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}
			case 5:
			{
				int p[] = {0};
				int w[] = {5,6};
				_expected = 11;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}
			case 6:
			{
				int p[] = {0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 8, 6, 7, 7, 9, 9, 10, 11, 8, 10, 11, 14, 13, 13, 12, 15, 16, 12, 15, 14, 17, 18, 16, 17, 18, 20, 19, 19, 21, 21, 23, 25, 22, 20, 22, 24, 25, 24, 23, 26, 27, 31, 27, 26, 28, 28, 29, 31, 30, 32, 32, 29, 33, 34, 36, 35, 34, 35, 30, 36, 38, 37, 39, 40, 33, 37, 39, 47, 38, 42, 40, 44, 41, 41, 46, 42, 44, 46, 43, 45, 47, 43, 50, 49, 50, 57, 45, 53, 48, 59, 51, 48, 54, 57, 59, 52, 58, 54, 51, 52, 56, 58, 55, 60, 60, 61, 49, 55, 62, 61, 64, 67, 71, 65, 63, 53, 70, 56, 62, 69, 66, 68, 69, 72, 75, 65, 70, 63, 79, 68, 72, 66, 73, 64, 73, 78, 86, 74, 80, 78, 67, 71, 77, 76, 82, 76, 80, 79, 84, 81, 87, 87, 88, 75, 77, 94, 85, 92, 81, 83, 88, 74, 84, 93, 93, 91, 83, 101, 103, 86, 82, 91, 95, 97, 85, 90, 89, 118, 96, 94, 96, 100, 98, 92, 101, 99, 104, 97, 100, 122, 95, 99, 105, 98, 103, 106, 109, 108, 102, 107, 104, 113, 116, 106, 108, 114, 123, 114, 110, 107, 105, 117, 89, 109, 102, 115, 90, 110, 117, 118, 111, 112, 112, 111, 115, 113, 122, 124, 119, 126, 137, 116, 121, 132, 119, 131, 125, 120, 152, 134, 127, 129, 132, 144, 157, 121, 120, 130, 138, 124, 125, 130, 127, 123, 138, 134, 150, 129, 133, 149, 140, 128, 131, 141, 141, 142, 145, 150, 164, 136, 135, 139, 135, 128, 152, 126, 133, 143, 146, 143, 175, 161, 151, 149, 148, 136, 144, 137, 160, 162, 159, 154, 162, 140, 145, 173, 146, 151, 139, 148, 157, 169, 167, 163, 142, 153, 156, 169, 161, 180, 171, 147, 171, 160, 159, 165, 176, 179, 174, 158, 153, 155, 178, 166, 163, 173, 170, 156, 168, 200, 187, 176, 166, 183, 147, 154, 174, 155, 167, 172, 177, 184, 180, 191, 181, 179, 187, 193, 193, 165, 185, 182, 158, 182, 164, 191, 206, 194, 195, 188, 175, 189, 192, 196, 172, 168, 211, 181, 196, 178, 207, 170, 201, 183, 198, 186, 200, 197, 210, 205, 214, 189, 185, 190, 198, 184, 211, 192, 202, 177, 197, 199, 203, 231, 204, 201, 186, 213, 215, 222, 194, 247, 227, 208, 215, 207, 225, 206, 218, 222, 223, 188, 219, 242, 231, 216, 236, 250, 204, 225, 208, 220, 209, 212, 214, 217, 236, 190, 205, 216, 218, 227, 203, 221, 247, 233, 210, 209, 244, 224, 195, 223, 230, 226, 229, 237, 261, 241, 232, 274, 250, 272, 237, 199, 239, 271, 240, 232, 254, 233, 248, 235, 242, 234, 212, 226, 261, 228, 202, 240, 230, 253, 229, 235, 252, 286, 224, 220, 246, 266, 243, 217, 239, 256, 221, 278, 238, 260, 238, 246, 262, 265, 244, 253, 251, 228, 268, 251, 300, 279, 268, 245, 245, 249, 282, 243, 219, 255, 275, 241, 293, 288, 257, 254, 249, 266, 252, 213, 258, 259, 293, 256, 234, 291, 269, 289, 274, 272, 265, 271, 270, 263, 305, 302, 264, 269, 302, 258, 275, 333, 267, 345, 276, 284, 283, 267, 299, 280, 296, 294, 297, 281, 284, 260, 287, 288, 270, 300, 295, 331, 248, 259, 304, 278, 283, 318, 289, 328, 317, 279, 287, 298, 277, 290, 330, 282, 273, 334, 301, 264, 292, 324, 285, 319, 304, 298, 303, 257, 299, 286, 263, 336, 255, 280, 311, 327, 301, 285, 306, 314, 291, 294, 371, 307, 277, 321, 308, 340, 311, 319, 347, 310, 331, 322, 320, 341, 325, 313, 360, 309, 337, 318, 348, 315, 295, 351, 328, 309, 292, 344, 314, 321, 323, 262, 276, 290, 329, 336, 333, 338, 273, 315, 339, 281, 355, 356, 308, 317, 349, 312, 362, 296, 326, 332, 360, 381, 307, 390, 344, 297, 361, 343, 367, 327, 343, 335, 388, 335, 355, 340, 303, 363, 322, 346, 347, 351, 305, 306, 363, 358, 316, 353, 312, 350, 379, 316, 372, 373, 394, 326, 324, 349, 365, 380, 368, 353, 374, 371, 389, 342, 359, 330, 405, 357, 325, 382, 337, 369, 368, 367, 370, 345, 332, 342, 372, 449, 352, 420, 378, 320, 334, 357, 404, 329, 364, 369, 380, 387, 397, 393, 377, 323, 411, 384, 364, 379, 310, 407, 361, 370, 401, 394, 366, 406, 359, 346, 365, 404, 403, 338, 396, 377, 434, 403, 382, 426, 398, 348, 354, 366, 391, 399, 378, 397, 410, 313, 392, 386, 452, 423, 354, 412, 401, 385, 373, 457, 415, 422, 414, 358, 418, 385, 391, 375, 396, 389, 356, 390, 374, 426, 350, 436, 352};
				int w[] = {155, 186, 274, 371, 486, 491, 554, 607, 838, 997, 1044, 1123, 1146, 1231, 1290, 1356, 1438, 1977, 2084, 2084, 2172, 2369, 2689, 2935, 3227, 3261, 3461, 3516, 3762, 3867, 4000, 4130, 4264, 4356, 4712, 4848, 5128, 5214, 5469, 5726, 5869, 5925, 6075, 6091, 6140, 6529, 6852, 6856, 6860, 7372, 7373, 7388, 7701, 7797, 7964, 8035, 8100, 8112, 8269, 8390, 8455, 8473, 8490, 8672, 8729, 8797, 8814, 8932, 8936, 9205, 9396, 9490, 9617, 9796, 9908, 9987, 10045, 10165, 10267, 10397, 10574, 10659, 10718, 10723, 10756, 10893, 10965, 11031, 11080, 11153, 11157, 11256, 11321, 11500, 11624, 11696, 11906, 11912, 12008, 12787, 12851, 12991, 13087, 13481, 13586, 13640, 13674, 13830, 14201, 14267, 14274, 14276, 14425, 14486, 14586, 14607, 14804, 14909, 15051, 15296, 15313, 15349, 15397, 15424, 15598, 15652, 15738, 15764, 15869, 16297, 16334, 16381, 16731, 16961, 16997, 17157, 17819, 18104, 18287, 18309, 18453, 18656, 18682, 18714, 18926, 19084, 19093, 19251, 19547, 19704, 19799, 20351, 20560, 20699, 20725, 20901, 20983, 21175, 21265, 21308, 21340, 21493, 21584, 21655, 21760, 21864, 21941, 21959, 22017, 22404, 22648, 22818, 22904, 22911, 23187, 23229, 23423, 23530, 23542, 23678, 23694, 23961, 24102, 24113, 24187, 24312, 24523, 24648, 24722, 24779, 24845, 24878, 24923, 25220, 25391, 25504, 25738, 25937, 25972, 26100, 26256, 26296, 26306, 26336, 26651, 26944, 27004, 27158, 27617, 27761, 27825, 28018, 28124, 28146, 28355, 28386, 28596, 28825, 28832, 28877, 29005, 29280, 29828, 29842, 29890, 30147, 30613, 30815, 30971, 30999, 31034, 31099, 31219, 31241, 31347, 31639, 31794, 31957, 31982, 32036, 32078, 32133, 32255, 32358, 32446, 32512, 32526, 32985, 33034, 33501, 33701, 33738, 33778, 33911, 34131, 34134, 34145, 34522, 34639, 34673, 34683, 34748, 34997, 35044, 35094, 35185, 35195, 35278, 35318, 35471, 35507, 35578, 35777, 35884, 36066, 36134, 36259, 36330, 36343, 36362, 36603, 36898, 36926, 37027, 37048, 37074, 37120, 37262, 37289, 37384, 37523, 37628, 37919, 38033, 38152, 38193, 38353, 38357, 38541, 38572, 38593, 38798, 38967, 39082, 39235, 39460, 39539, 39545, 39578, 39749, 39781, 40274, 40302, 40418, 40423, 40425, 40426, 40574, 40694, 40766, 41010, 41084, 41183, 41188, 41336, 41341, 41395, 41691, 41721, 41732, 42032, 42112, 42150, 42157, 42212, 42287, 42340, 42676, 42744, 42807, 42854, 43014, 43016, 43172, 43270, 43286, 43296, 43297, 43339, 43351, 43449, 43500, 43534, 43628, 43726, 44167, 44174, 44259, 44459, 44514, 44765, 44771, 44798, 44810, 44866, 44994, 45047, 45070, 45120, 45184, 45304, 45502, 45615, 45646, 45713, 45827, 45887, 46022, 46031, 46083, 46083, 46088, 46224, 46242, 46318, 46518, 46744, 46799, 47356, 47359, 47368, 47634, 47652, 47672, 47815, 47879, 48028, 48210, 48262, 48271, 48304, 48751, 48776, 49013, 49141, 49142, 49196, 49269, 49278, 49663, 49882, 49890, 49989, 50004, 50057, 50066, 50106, 50351, 50413, 50510, 50630, 50771, 51052, 51309, 51330, 51584, 51696, 51817, 51857, 51905, 51907, 52100, 52442, 52596, 53227, 53490, 53508, 53596, 53662, 53959, 54002, 54075, 54253, 54285, 54437, 54514, 54530, 54537, 54693, 54775, 54996, 55014, 55031, 55210, 55451, 55454, 55898, 55945, 56128, 56250, 56269, 56808, 56976, 57333, 57336, 57399, 57406, 57480, 57491, 57630, 57869, 57918, 57926, 57935, 58004, 58039, 58045, 58106, 58145, 58422, 58573, 58630, 58683, 58719, 59070, 59320, 59442, 59556, 59616, 59727, 59743, 59765, 59888, 59994, 60003, 60901, 60928, 60944, 60973, 61854, 61958, 61998, 62019, 62127, 62219, 62273, 62601, 62789, 62900, 62905, 62979, 63124, 63177, 63224, 63231, 63369, 63526, 63537, 64349, 64465, 64520, 64721, 64859, 65189, 65330, 65374, 65410, 65470, 65547, 65683, 65779, 65782, 65829, 65872, 66138, 66160, 66268, 66548, 66627, 66986, 66997, 67245, 67288, 67515, 67567, 67712, 67798, 67933, 67983, 68070, 68414, 68469, 68487, 68530, 68842, 68879, 69142, 69266, 69342, 69464, 69623, 69796, 69861, 70020, 70073, 70145, 70183, 70196, 70431, 70623, 70644, 70663, 70709, 70749, 70774, 70966, 71176, 71301, 71335, 71391, 71427, 71660, 71807, 71836, 71845, 71895, 71901, 72072, 72504, 72572, 72588, 72637, 72697, 72705, 72710, 72845, 73124, 73195, 73354, 73379, 73666, 73670, 73955, 74019, 74182, 74283, 74303, 74455, 74540, 74549, 74648, 74802, 74836, 75033, 75189, 75195, 75425, 75489, 75514, 75615, 75621, 75812, 75849, 76062, 76068, 76078, 76134, 76203, 76209, 76350, 76374, 76411, 76413, 76450, 76519, 76663, 76825, 76891, 76896, 77019, 77081, 77222, 77560, 77614, 77730, 77895, 78132, 78352, 78388, 78423, 78592, 78769, 79034, 79035, 79047, 79111, 79120, 79489, 79548, 79620, 79625, 79764, 79781, 80015, 80155, 80165, 80170, 80263, 80387, 80398, 80731, 80756, 80795, 80893, 81044, 81378, 81484, 81604, 81792, 81867, 81867, 81897, 81900, 81924, 81983, 82016, 82164, 82196, 82218, 82592, 82971, 83123, 83367, 83477, 83545, 83862, 83998, 84268, 84455, 84572, 84590, 84790, 84881, 85082, 85131, 85234, 85522, 85677, 85679, 85719, 85802, 85816, 86148, 86155, 86163, 86246, 86249, 86262, 86270, 86455, 86583, 86589, 86700, 86738, 86858, 86976, 86998, 87090, 87114, 87224, 87400, 87611, 87911, 87928, 87930, 88143, 88378, 88394, 88624, 88739, 89002, 89314, 89369, 89399, 89399, 89457, 89538, 89798, 90037, 90648, 90668, 90849, 90916, 91052, 91059, 91336, 91503, 91689, 91912, 92424, 92471, 92987, 93052, 93103, 93154, 93165, 93237, 93339, 93446, 93564, 93691, 93702, 93811, 93927, 93957, 94249, 94263, 94273, 95084, 95485, 95658, 95785, 96056, 96141, 96194, 96503, 96670, 96843, 97089, 97113, 97179, 97184, 97204, 97399, 97806, 98292, 98303, 98355, 98443, 98694, 98711, 99019, 99066, 99131, 99136, 99395, 99476};
				_expected = 282635;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}
			/*case 7:
			{
				int p[] = ;
				int w[] = ;
				_expected = ;
				_received = _obj.minStones(vector <int>(p, p+sizeof(p)/sizeof(int)), vector <int>(w, w+sizeof(w)/sizeof(int))); break;
			}*/
			default: return 0;
		}
		cout.setf(ios::fixed,ios::floatfield);
		cout.precision(2);
		double _elapsed = (double)(clock()-_start)/CLOCKS_PER_SEC;
		if (_received == _expected)
			cout << "#" << _tc << ": Passed (" << _elapsed << " secs)" << endl;
		else
		{
			cout << "#" << _tc << ": Failed (" << _elapsed << " secs)" << endl;
			cout << "           Expected: " << _expected << endl;
			cout << "           Received: " << _received << endl;
		}
	}
}

// END CUT HERE
